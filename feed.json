{
    "version": "https://jsonfeed.org/version/1",
    "title": "清街余晖",
    "subtitle": "",
    "icon": "https://pustea-wls.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://pustea-wls.github.io",
    "items": [
        {
            "id": "https://pustea-wls.github.io/2022/08/02/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1aspnetcore/",
            "url": "https://pustea-wls.github.io/2022/08/02/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1aspnetcore/",
            "title": "nginx负载均衡aspnetcore",
            "date_published": "2022-08-02T02:00:00.000Z",
            "content_html": "<h2 id=\"使用docker部署两个aspnetcore项目\"><a class=\"anchor\" href=\"#使用docker部署两个aspnetcore项目\">#</a> 使用 Docker 部署两个 aspnetcore 项目</h2>\n<p><a href=\"https://pustea-wls.github.io/pustea-wls/2021/11/10/aspnetcore%E9%83%A8%E7%BD%B2%E5%88%B0linux/\">docker 部署 aspnetcore 项目</a></p>\n<p>两个项目已经部署好了<br />\n<img data-src=\"1.jpg\" alt=\"\" /></p>\n<h2 id=\"使用docker部署nginx\"><a class=\"anchor\" href=\"#使用docker部署nginx\">#</a> 使用 Docker 部署 Nginx</h2>\n<h3 id=\"拉取nginx镜像\"><a class=\"anchor\" href=\"#拉取nginx镜像\">#</a> 拉取 nginx 镜像</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker pull nginx:latest</pre></td></tr></table></figure><h3 id=\"运行容器\"><a class=\"anchor\" href=\"#运行容器\">#</a> 运行容器</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run --name mynginx -p 8889:80 -d nginx</pre></td></tr></table></figure><p><img data-src=\"2.jpg\" alt=\"\" /></p>\n<h2 id=\"nginx配置负载均衡\"><a class=\"anchor\" href=\"#nginx配置负载均衡\">#</a> Nginx 配置负载均衡</h2>\n<h3 id=\"将nginx容器内部的配置文件复制到linux本地\"><a class=\"anchor\" href=\"#将nginx容器内部的配置文件复制到linux本地\">#</a> 将 nginx 容器内部的配置文件复制到 linux 本地</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker cp 容器名：要拷贝的文件在容器里面的路径  要拷贝到宿主机的相应路径 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker cp mynginx:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;root&#x2F;advanced&#x2F;nginx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker cp mynginx:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf&#x2F;root&#x2F;advanced&#x2F;nginx</pre></td></tr></table></figure><p><img data-src=\"3.jpg\" alt=\"\" /></p>\n<h3 id=\"将confd文件夹下面的defaultconf进行修改\"><a class=\"anchor\" href=\"#将confd文件夹下面的defaultconf进行修改\">#</a> 将 conf.d 文件夹下面的 default.conf 进行修改</h3>\n<p><img data-src=\"4.jpg\" alt=\"\" /></p>\n<h3 id=\"重新运行nginx容器\"><a class=\"anchor\" href=\"#重新运行nginx容器\">#</a> 重新运行 nginx 容器</h3>\n<p>将之前的 nginx 删除</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker kill mynginx -- 杀死 mynginx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker rm mynginx   -- 删除 mynginx</pre></td></tr></table></figure><p><code>将本地配置文件映射到nginx容器</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d --name mynginx -p 8889:80 -v &#x2F;root&#x2F;advanced&#x2F;nginx&#x2F;conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d -v &#x2F;root&#x2F;advanced&#x2F;nginx&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf --privileged&#x3D;true nginx</pre></td></tr></table></figure><p><div id=\"dplayer0\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.mp4\",\"pic\":\"https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.jpg\"},\"danmaku\":{\"id\":\"9E2E3368B56CDBB4\",\"api\":\"https://api.prprpr.me/dplayer/\",\"token\":\"tokendemo\",\"addition\":[\"https://dplayer.daoapp.io/bilibili?aid=4157142\"]}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></p>\n",
            "tags": [
                "Nginx",
                "Asp.net Core",
                "Docker",
                "Nginx"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2022/07/14/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BAuthorizationFilter/",
            "url": "https://pustea-wls.github.io/2022/07/14/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BAuthorizationFilter/",
            "title": "aspnetcore过滤器系列五：AuthorizationFilter",
            "date_published": "2022-07-14T07:00:00.000Z",
            "content_html": "<h1 id=\"一鉴权授权的常见应用背景业务和技术角度\"><a class=\"anchor\" href=\"#一鉴权授权的常见应用背景业务和技术角度\">#</a> 一：鉴权授权的常见应用背景 (业务和技术角度)</h1>\n<h6 id=\"1授权是在用户注册登录某一系统后-有部分本来不可用的功能可以访问了-鉴权授权二者把保护资源这件事分成两步来完成\"><a class=\"anchor\" href=\"#1授权是在用户注册登录某一系统后-有部分本来不可用的功能可以访问了-鉴权授权二者把保护资源这件事分成两步来完成\">#</a> 1. 授权是在用户注册登录某一系统后。有部分本来不可用的功能可以访问了。鉴权授权二者把保护资源这件事分成两步来完成</h6>\n<h6 id=\"2为了保护服务器端资源\"><a class=\"anchor\" href=\"#2为了保护服务器端资源\">#</a> 2. 为了保护服务器端资源</h6>\n<h6 id=\"3因为http协议无状态-多个请求之前-相互独立之前没有任关系-服务器不知道那些用户已经登录或者没有登录-鉴权授权就是让多个请求响应之前建立连写\"><a class=\"anchor\" href=\"#3因为http协议无状态-多个请求之前-相互独立之前没有任关系-服务器不知道那些用户已经登录或者没有登录-鉴权授权就是让多个请求响应之前建立连写\">#</a> 3. 因为 Http 协议：无状态 --- 多个请求之前 --- 相互独立，之前没有任关系。服务器不知道那些用户已经登录，或者没有登录 --- 鉴权授权就是让多个请求响应之前建立连写</h6>\n<h1 id=\"二最常见的授权seesiooncookies\"><a class=\"anchor\" href=\"#二最常见的授权seesiooncookies\">#</a> 二：最常见的授权 (Seesioon+Cookies)</h1>\n<h6 id=\"1客户端带上用户名密码请求服务端服务端生成一个seesion响应客户端的时候返回一个seesionid\"><a class=\"anchor\" href=\"#1客户端带上用户名密码请求服务端服务端生成一个seesion响应客户端的时候返回一个seesionid\">#</a> 1. 客户端带上用户名 + 密码请求服务端，服务端生成一个 Seesion 响应客户端的时候返回一个 SeesionId</h6>\n<h6 id=\"2客户端将seesionid保护在cookies中-再次请求的时候就会带上cookies中sessionid\"><a class=\"anchor\" href=\"#2客户端将seesionid保护在cookies中-再次请求的时候就会带上cookies中sessionid\">#</a> 2. 客户端将 SeesionId 保护在 Cookies 中。再次请求的时候就会带上 Cookies 中 SessionId</h6>\n<h6 id=\"3服务器拿到客户端请求的seesioni判段是否是之前分发出去的seesionid-鉴权\"><a class=\"anchor\" href=\"#3服务器拿到客户端请求的seesioni判段是否是之前分发出去的seesionid-鉴权\">#</a> 3. 服务器拿到客户端请求的 SeesionI 判段是否是之前分发出去的 SeesionId --- 鉴权</h6>\n<h6 id=\"4有seesionid就表示已经登录过后面根据seesionid查找出用户信息-根据用户信息作出判断当前的用户是否可以去访问某些资源\"><a class=\"anchor\" href=\"#4有seesionid就表示已经登录过后面根据seesionid查找出用户信息-根据用户信息作出判断当前的用户是否可以去访问某些资源\">#</a> 4. 有 SeesionId 就表示已经登录过，后面根据 SeesionId 查找出用户信息。根据用户信息作出判断，当前的用户是否可以去访问某些资源</h6>\n<h1 id=\"三为什么使用jwt进行鉴权授权\"><a class=\"anchor\" href=\"#三为什么使用jwt进行鉴权授权\">#</a> 三：为什么使用 Jwt 进行鉴权授权</h1>\n<h6 id=\"1现在大型的互联网系统开发中通常会用到集群和分布式以达到系统的处理能力\"><a class=\"anchor\" href=\"#1现在大型的互联网系统开发中通常会用到集群和分布式以达到系统的处理能力\">#</a> 1. 现在大型的互联网系统开发中通常会用到集群和分布式以达到系统的处理能力</h6>\n<h6 id=\"2多个请求之前可能会被分发到不同的服务器进行处理-这导致可能除了发放seesionid的那台服务器外-其他服务器并不能处理这个seesionid\"><a class=\"anchor\" href=\"#2多个请求之前可能会被分发到不同的服务器进行处理-这导致可能除了发放seesionid的那台服务器外-其他服务器并不能处理这个seesionid\">#</a> 2. 多个请求之前可能会被分发到不同的服务器进行处理。这导致可能除了发放 SeesionId 的那台服务器外。其他服务器并不能处理这个 SeesionId.</h6>\n<h6 id=\"3对于上述2的问题-会有一些解决办法-例如共享内存-所有的服务器都从共享内存读取数据-但seesion存储在服务器上也是有一定的开销并且cookies并不安全\"><a class=\"anchor\" href=\"#3对于上述2的问题-会有一些解决办法-例如共享内存-所有的服务器都从共享内存读取数据-但seesion存储在服务器上也是有一定的开销并且cookies并不安全\">#</a> 3. 对于上述 2 的问题。会有一些解决办法。例如共享内存。所有的服务器都从共享内存读取数据。但 Seesion 存储在服务器上也是有一定的开销，并且 Cookies 并不安全</h6>\n<h1 id=\"四aspnetcore鉴权授权分为两步\"><a class=\"anchor\" href=\"#四aspnetcore鉴权授权分为两步\">#</a> 四：AspNetCore 鉴权授权分为两步</h1>\n<h6 id=\"1鉴权搜集请求过来的代表用户身份的标识数据-解析用户身份数据-处理-写入到上下文\"><a class=\"anchor\" href=\"#1鉴权搜集请求过来的代表用户身份的标识数据-解析用户身份数据-处理-写入到上下文\">#</a> 1. 鉴权：搜集请求过来的代表用户身份的标识数据 --- 解析用户身份数据 --- 处理 --- 写入到上下文</h6>\n<h6 id=\"2授权根据用户身份信息来判断是否允许你请求\"><a class=\"anchor\" href=\"#2授权根据用户身份信息来判断是否允许你请求\">#</a> 2. 授权：根据用户身份信息来判断是否允许你请求</h6>\n<h1 id=\"五authorize-标记就表示要授权\"><a class=\"anchor\" href=\"#五authorize-标记就表示要授权\">#</a> 五：Authorize--- 标记就表示要授权</h1>\n<h6 id=\"1authenticationschemes-需要明确通过那个方案哪个渠道来授权-方案渠道-cookiesjwt等\"><a class=\"anchor\" href=\"#1authenticationschemes-需要明确通过那个方案哪个渠道来授权-方案渠道-cookiesjwt等\">#</a> 1.AuthenticationSchemes--- 需要明确通过那个方案 (哪个渠道来授权)--- 方案 / 渠道 Cookies,Jwt 等</h6>\n<h6 id=\"2标记authorize如果不指定authenticationschemes默认的就是cookies\"><a class=\"anchor\" href=\"#2标记authorize如果不指定authenticationschemes默认的就是cookies\">#</a> 2. 标记 Authorize 如果不指定 AuthenticationSchemes 默认的就是 Cookies</h6>\n<h6 id=\"3role角色授权\"><a class=\"anchor\" href=\"#3role角色授权\">#</a> 3.Role 角色授权</h6>\n<h6 id=\"4policy策略授权\"><a class=\"anchor\" href=\"#4policy策略授权\">#</a> 4.Policy 策略授权</h6>\n<h1 id=\"六使用cookies进行鉴权授权\"><a class=\"anchor\" href=\"#六使用cookies进行鉴权授权\">#</a> 六：使用 Cookies 进行鉴权授权</h1>\n<ul>\n<li>在鉴权授权之前我们需要生成用户的相关信息和授权渠道</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[HttpGet]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public void Login (string name,string password) </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     var claims &#x3D; new List&lt;Claim&gt;()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         &#x2F;&#x2F; 里面的载体可以记录一些用户相关信息</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         new Claim (ClaimTypes.Role,&quot;Admin&quot;),</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         new Claim (&quot;Name&quot;,name)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     &#125;;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     ClaimsPrincipal userPrincipal &#x3D; new ClaimsPrincipal (new ClaimsIdentity (claims, &quot;Customer&quot;));</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     &#x2F;&#x2F; 授权渠道为 Cookies</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     HttpContext.SignInAsync (CookieAuthenticationDefaults.AuthenticationScheme, userPrincipal, new AuthenticationProperties</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     &#123;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         ExpiresUtc &#x3D; DateTime.UtcNow.AddSeconds (60) &#x2F;&#x2F; 过期时间 60 秒</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     &#125;).Wait ()</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     var user &#x3D; HttpContext.User;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>&#125;</pre></td></tr></table></figure><ul>\n<li>在需要授权你的 action 标注上</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Route (&quot;&#x2F;api&#x2F;[action]&quot;)]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public class AuthorizeController:ControllerBase</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   [HttpGet]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   [Authorize] &#x2F;&#x2F; 如果只标记了 authorize, 只需要解析到用户信息。就可以进行访问</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   public string AuthorizeIndex () </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       return &quot;authoize&quot;;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   &#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    [HttpGet]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    public string Default () </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      return &quot;授权失败默认跳转接口&quot;;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>&#125;</pre></td></tr></table></figure><ul>\n<li>\n<p>运行项目调用 api, 报错<br />\n<img data-src=\"authorizationFilter-1.jpg\" alt=\"\" /></p>\n</li>\n<li>\n<p>解决办法在 <code>Startup</code>  文件中注册鉴权</p>\n</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#x2F;&#x2F; 默认进行 cookie 鉴权</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>services.AddAuthentication (CookieAuthenticationDefaults.AuthenticationScheme).AddCookie (option &#x3D;&gt;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     option.LoginPath &#x3D; &quot;&#x2F;api&#x2F;Default&quot;;   &#x2F;&#x2F; 如果授权失败默认跳转的 api</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;);</pre></td></tr></table></figure><ul>\n<li>cookies 过期后再调用 api<br />\n<img data-src=\"authorizationFilter-2.jpg\" alt=\"\" /><br />\n <code>跳转到授权失败的默认api</code></li>\n</ul>\n<h1 id=\"七使用角色授权\"><a class=\"anchor\" href=\"#七使用角色授权\">#</a> 七：使用角色授权</h1>\n<ul>\n<li>登录用户的角色是在生成用户的载体中录入的<br />\n<img data-src=\"authorizationFilter-3.jpg\" alt=\"\" /></li>\n<li>在 Authorization 中标记上角色授权</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[HttpGet]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> [Authorize (Roles &#x3D;(&quot;Admin&quot;))] </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> public string AuthorizeIndex() </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     return &quot;authoize&quot;;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> &#125;</pre></td></tr></table></figure><p>如果标记的角色与当前登录的用户角色不匹配。则授权失败，找不到请求的 api。返回错误码 <code>404</code></p>\n<h1 id=\"八使用策略授权\"><a class=\"anchor\" href=\"#八使用策略授权\">#</a> 八：使用策略授权</h1>\n<ul>\n<li>在 <code>Startup</code>  文件中注册策略授权<br />\n策略授权就是自定义一些应用系统的授权方案</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>services.AddAuthorization(policy &#x3D;&gt;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>policy.AddPolicy(&quot;Default&quot;, options &#x3D;&gt;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     options.RequireRole(&quot;Admin&quot;);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#125;);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;);</pre></td></tr></table></figure><ul>\n<li>在 Authorization 中标记上策略授权</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[HttpGet]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> [Authorize (Policy &#x3D;(&quot;Default&quot;))] </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> public string AuthorizeIndex() </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     return &quot;authoize&quot;;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> &#125;</pre></td></tr></table></figure><p><a href=\"https://pustea-wls.github.io/pustea-wls/2021/08/14/Net/Net5/\">自定义策略授权</a></p>\n",
            "tags": [
                "Asp.net Core",
                "Asp.net Core",
                "AOP",
                "Filter"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2022/07/13/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BExceptionFilter/",
            "url": "https://pustea-wls.github.io/2022/07/13/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BExceptionFilter/",
            "title": "aspnetcore过滤器系列四：ExceptionFilter",
            "date_published": "2022-07-13T07:00:00.000Z",
            "content_html": "<h2 id=\"exceptionfilter的同步实现\"><a class=\"anchor\" href=\"#exceptionfilter的同步实现\">#</a> ExceptionFilter 的同步实现</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomExceptionFilterAttribute : Attribute, IExceptionFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public void OnException(ExceptionContext context)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            Console.WriteLine(context.Exception);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    &#125;</pre></td></tr></table></figure><p>将异常过滤器标注在 action 中</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Route(&quot;&#x2F;api&#x2F;[action]&quot;)]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public class ExceptionController:ControllerBase</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        public ExceptionController() </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        [HttpGet]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        [CustomExceptionFilterAttribute]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        public string ExceptionIndex() </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            int zero &#x3D; 0;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            int a &#x3D; 10 &#x2F; zero;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            return &quot;exceptionFilter&quot;;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>&#125;</pre></td></tr></table></figure><h3 id=\"运行项目\"><a class=\"anchor\" href=\"#运行项目\">#</a> 运行项目</h3>\n<p><img data-src=\"exceptionFilter-1.png\" alt=\"\" /></p>\n<h3 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h3>\n<p><code>当发生异常时捕获异常进行处理</code></p>\n<h2 id=\"exceptionfilter的异步实现\"><a class=\"anchor\" href=\"#exceptionfilter的异步实现\">#</a> ExceptionFilter 的异步实现</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomAsyncExceptionFilterAttribute : Attribute, IAsyncExceptionFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public Task OnExceptionAsync(ExceptionContext context)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>             Console.WriteLine(context.Exception);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    &#125;</pre></td></tr></table></figure><h2 id=\"exceptionfilter在业务上能做什么\"><a class=\"anchor\" href=\"#exceptionfilter在业务上能做什么\">#</a> ExceptionFilter 在业务上能做什么</h2>\n<p><code>对异常事件的记录以便开发人员调试追踪。对异常结果进行人性化处理,对用户更加友好</code></p>\n<p>异常处理之前的结果<br />\n<img data-src=\"exceptionFilter-2.png\" alt=\"\" /></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomExceptionFilterAttribute : Attribute, IExceptionFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public void OnException (ExceptionContext context)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            context.Result &#x3D; new JsonResult (new</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                success&#x3D;false,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                message&#x3D;&quot;程序异常&quot;+context.Exception.Message</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            &#125;);</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            Console.WriteLine (context.Exception);</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    &#125;</pre></td></tr></table></figure><p>异常处理之后的结果<br />\n<img data-src=\"exceptionFilter-3.png\" alt=\"\" /></p>\n<h3 id=\"局限性\"><a class=\"anchor\" href=\"#局限性\">#</a> 局限性</h3>\n<p><code>ExceptionFilter有一个捕获异常的范围。如果异常发生在范围外。该异常将不再被捕获</code></p>\n",
            "tags": [
                "Asp.net Core",
                "Asp.net Core",
                "AOP",
                "Filter"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2022/07/08/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BResultFilter/",
            "url": "https://pustea-wls.github.io/2022/07/08/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BResultFilter/",
            "title": "aspnetcore过滤器系列三：ResultFilter",
            "date_published": "2022-07-08T08:00:00.000Z",
            "content_html": "<h2 id=\"resultfilter同步实现\"><a class=\"anchor\" href=\"#resultfilter同步实现\">#</a> ResultFilter 同步实现</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomResultFilterAttribute : Attribute, IResultFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public void OnResultExecuted (ResultExecutedContext context)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            Console.WriteLine (&quot;结果过滤器之后&quot;);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        public void OnResultExecuting (ResultExecutingContext context)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            Console.WriteLine (&quot;结果过滤器之前&quot;);</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    &#125;</pre></td></tr></table></figure><p>标注 action</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Route (&quot;&#x2F;api&#x2F;[action]&quot;)]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public class ResultController:ControllerBase</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      public ResultController () </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         Console.WriteLine (&quot;构造函数&quot;);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      [HttpGet]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      [CustomResultFilterAttribute]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      public  string ResultIndex () </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      &#123;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          Console.WriteLine (&quot;方法执行&quot;);</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          return &quot;resultFilter&quot;;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>&#125;</pre></td></tr></table></figure><h3 id=\"运行项目\"><a class=\"anchor\" href=\"#运行项目\">#</a> 运行项目</h3>\n<p><img data-src=\"resultFilter-1.jpg\" alt=\"\" /></p>\n<h3 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h3>\n<p><code>控制器构造函数-》调用的API(action)-》OnResultExecuting-》OnResultExecuted</code></p>\n<h2 id=\"resultfilter异步实现\"><a class=\"anchor\" href=\"#resultfilter异步实现\">#</a> ResultFilter 异步实现</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomAsyncResultFilterAttribute : Attribute, IAsyncResultFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public async Task OnResultExecutionAsync (ResultExecutingContext context, ResultExecutionDelegate next)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            Console.WriteLine (&quot;结果过滤器之前&quot;);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            await next.Invoke ();</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            Console.WriteLine (&quot;结果过滤器之后&quot;);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &#125;</pre></td></tr></table></figure><h2 id=\"resultfilter在业务上能用来做什么\"><a class=\"anchor\" href=\"#resultfilter在业务上能用来做什么\">#</a> ResultFilter 在业务上能用来做什么</h2>\n<p><code>对接口(action)中的结果进行处理。例如将返回的结果变成统一的json格式</code></p>\n<p>处理之前的结果<br />\n<img data-src=\"resultFilter-2.jpg\" alt=\"\" /></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomResultFilterAttribute : Attribute, IResultFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public void OnResultExecuted (ResultExecutedContext context)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            Console.WriteLine (&quot;结果过滤器之后&quot;);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        public void OnResultExecuting (ResultExecutingContext context)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            dynamic result &#x3D; context.Result;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            context.Result &#x3D; new JsonResult (new Result </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            &#123;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                Data&#x3D;result.Value,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                Code&#x3D;200,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                Msg&#x3D;&quot;success&quot;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            &#125;);</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            Console.WriteLine (&quot;结果过滤器之前&quot;);</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    public class Result</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        public string Msg &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        public int Code &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        public object Data &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    &#125;</pre></td></tr></table></figure><p>处理之后的结果<br />\n<img data-src=\"resultFilter-3.jpg\" alt=\"\" /></p>\n",
            "tags": [
                "Asp.net Core",
                "Asp.net Core",
                "AOP",
                "Filter"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2022/07/07/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BActionFilter/",
            "url": "https://pustea-wls.github.io/2022/07/07/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BActionFilter/",
            "title": "aspnetcore过滤器系列二：ActionFilter",
            "date_published": "2022-07-07T06:00:00.000Z",
            "content_html": "<h2 id=\"actionfilter同步实现\"><a class=\"anchor\" href=\"#actionfilter同步实现\">#</a> ActionFilter 同步实现</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomActionFilterAttribute : Attribute, IActionFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public void OnActionExecuted (ActionExecutedContext context)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            Console.WriteLine (&quot;action 之后&quot;);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        public void OnActionExecuting (ActionExecutingContext context)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            Console.WriteLine (&quot;action 之前&quot;);</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    &#125;</pre></td></tr></table></figure><p>自定义实现的过滤器标注在 action</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Route (&quot;&#x2F;api&#x2F;[action]&quot;)]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public class ActionController : ControllerBase</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        public ActionController () </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            Console.WriteLine (&quot;action 构造函数&quot;);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        [HttpGet]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        [CustomActionFilterAttribute]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        public string ActionIndex () </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            _logger.LogInformation (&quot;日志记录方法执行&quot;);</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            return &quot;actionFilter&quot;;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>&#125;</pre></td></tr></table></figure><h3 id=\"运行项目\"><a class=\"anchor\" href=\"#运行项目\">#</a> 运行项目</h3>\n<p><img data-src=\"actionFilter-1.jpg\" alt=\"\" /></p>\n<h3 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h3>\n<p><code>控制器构造函数-》OnActionExecuting-》调用的API(action)-OnActionExecuted</code></p>\n<h2 id=\"actionfilter异步实现\"><a class=\"anchor\" href=\"#actionfilter异步实现\">#</a> ActionFilter 异步实现</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomAsyncActionFilterAttribute : Attribute, IAsyncActionFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public async Task OnActionExecutionAsync (ActionExecutingContext context, ActionExecutionDelegate next)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            Console.WriteLine (&quot;action 之前&quot;);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            await next.Invoke ();</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            Console.WriteLine (&quot;action 之后&quot;);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &#125;</pre></td></tr></table></figure><h2 id=\"actionfiter业务上能做什么\"><a class=\"anchor\" href=\"#actionfiter业务上能做什么\">#</a> ActionFiter 业务上能做什么</h2>\n<p><code>记录日志</code></p>\n<p>简单记录下实现日志的功能</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomActionFilterAttribute : Attribute, IActionFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        private readonly ILogger&lt;CustomActionFilterAttribute&gt; _logger;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        public CustomActionFilterAttribute (ILogger&lt;CustomActionFilterAttribute&gt; logger) </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            _logger &#x3D; logger;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        public void OnActionExecuted (ActionExecutedContext context)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            _logger.LogInformation (&quot;日志进入之后&quot;);</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            Console.WriteLine (&quot;action 之后&quot;);</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        public void OnActionExecuting (ActionExecutingContext context)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            _logger.LogInformation (&quot;日志进入之前&quot;);</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            Console.WriteLine (&quot;action 之前&quot;);</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    &#125;</pre></td></tr></table></figure><p>上面我们加了一个参数是日志接口的构造函数方法，当我们要在 action 上面去标记自定义的过滤器时，发现编译并不通过<br />\n<img data-src=\"actionFilter-2.jpg\" alt=\"\" /><br />\n上面的提示很清楚，我们没有传入对应的构造函数参数，以实例化对象。<br />\n如何不给构造函数参数也能实例化对象？？？<br />\n 答案:' 依赖注入 -- 让 IOC 容器来创建对象'<br />\n 下面有三种方法可以实现</p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<h6 id=\"1typefilterattribute支持filter的构造函数注入\"><a class=\"anchor\" href=\"#1typefilterattribute支持filter的构造函数注入\">#</a> 1.TypeFilterAttribute: 支持 Filter 的构造函数注入</h6>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[HttpGet]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>[TypeFilter (typeof (CustomActionFilterAttribute))]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>public string ActionIndex () </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    _logger.LogInformation (&quot;日志记录方法执行&quot;);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    return &quot;actionFilter&quot;;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;</pre></td></tr></table></figure><h6 id=\"2servicefilterattribute使用这个必须要注册服务同样支持filter的构造函数注入\"><a class=\"anchor\" href=\"#2servicefilterattribute使用这个必须要注册服务同样支持filter的构造函数注入\">#</a> 2.ServiceFilterAttribute: 使用这个必须要注册服务，同样支持 Filter 的构造函数注入</h6>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[HttpGet]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>[ServiceFilter (typeof (CustomActionFilterAttribute))]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>public string ActionIndex () </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    _logger.LogInformation (&quot;日志记录方法执行&quot;);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   return &quot;actionFilter&quot;;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;</pre></td></tr></table></figure><p>在 startup.cs 文件中我们需要注册一下 CustomActionFilterAttribute 这个类</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>services.AddTransient&lt;CustomActionFilterAttribute&gt;();</pre></td></tr></table></figure><h6 id=\"3全局注册支持filter的构造函数注入\"><a class=\"anchor\" href=\"#3全局注册支持filter的构造函数注入\">#</a> 3. 全局注册：支持 Filter 的构造函数注入</h6>\n<p>在 startup.cs 中</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>services.AddTransient&lt;CustomActionFilterAttribute&gt;();</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>services.AddControllers((options)&#x3D;&gt; </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  options.Filters.Add&lt;CustomActionFilterAttribute&gt;();</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;);</pre></td></tr></table></figure>",
            "tags": [
                "Asp.net Core",
                "Asp.net Core",
                "AOP",
                "Filter"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2022/06/28/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BResourceFilter/",
            "url": "https://pustea-wls.github.io/2022/06/28/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BResourceFilter/",
            "title": "aspnetcore过滤器系列一：ResourceFilter",
            "date_published": "2022-06-28T08:00:00.000Z",
            "content_html": "<p><code>aspnetcore中的过滤器是Aop编程的一种实现形式。记录下学习的过程，方便以后查阅</code></p>\n<h2 id=\"resourcefilter同步实现\"><a class=\"anchor\" href=\"#resourcefilter同步实现\">#</a> ResourceFilter 同步实现</h2>\n<p>我们新建一个 WebApi 项目，然后创建一个自定义实现的 ResourceFilter (资源过滤器)</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomResourceFilterAttribute : Attribute, IResourceFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        &#x2F;&#x2F; 资源进入之前</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        public void OnResourceExecuting (ResourceExecutingContext context)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            Console.WriteLine (&quot;请求之前&quot;);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        &#x2F;&#x2F; 资源退出之后</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        public void OnResourceExecuted (ResourceExecutedContext context)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            Console.WriteLine (&quot;请求之后&quot;);</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    &#125;</pre></td></tr></table></figure><p>上面自定义的资源过滤器继承了特性和实现了资源过滤器的接口</p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p><code>在框架中凡是系统提供的接口都是给开发者做扩展使用的</code> <br />\n实现完自定义的资源过滤器后，将他们标注在相关的 action 上面</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Route (&quot;&#x2F;api&#x2F;[action]&quot;)]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public class ResourceController : ControllerBase</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      private readonly ILogger&lt;ResourceController&gt; _logger;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      public ResourceController (ILogger&lt;ResourceController&gt; logger)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          _logger &#x3D; logger;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          Console.WriteLine (&quot;构造函数&quot;);</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      [HttpGet]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      [CustomResourceFilter]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      public string ResourceIndex ()</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      &#123;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          Console.WriteLine (&quot;方法执行中&quot;);</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          return &quot;success&quot;;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&#125;</pre></td></tr></table></figure><h3 id=\"运行项目\"><a class=\"anchor\" href=\"#运行项目\">#</a> 运行项目</h3>\n<p><img data-src=\"resourceFilter-1.jpg\" alt=\"\" /></p>\n<h3 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h3>\n<p><code>OnResourceExecuting-》控制器构造函数-》调用的API(action)-》OnResourceExecuted</code></p>\n<h2 id=\"resourcefilter异步实现\"><a class=\"anchor\" href=\"#resourcefilter异步实现\">#</a> ResourceFilter 异步实现</h2>\n<p>同步和异步原理和步骤上是一样的，书写的代码有所不同.</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomAsyncResourceFilterAttribute : Attribute, IAsyncResourceFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public async Task OnResourceExecutionAsync (ResourceExecutingContext context, ResourceExecutionDelegate next)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            Console.WriteLine (&quot;执行之前 Async&quot;);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            ResourceExecutedContext resource &#x3D; await next.Invoke ();</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            Console.WriteLine (&quot;执行之后 Async&quot;);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &#125;</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Route (&quot;&#x2F;api&#x2F;[action]&quot;)]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public class ResourceController : ControllerBase</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     private readonly ILogger&lt;ResourceController&gt; _logger  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     public ResourceController (ILogger&lt;ResourceController&gt; logger)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         _logger &#x3D; logger;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         Console.WriteLine (&quot;构造函数&quot;);</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     [HttpGet]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     [CustomAsyncResourceFilterAttribute]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     public string ResourceAsyncIndex () </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     &#123;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         Console.WriteLine (&quot;方法执行中&quot;);</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         return &quot;success&quot;;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     &#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>&#125;</pre></td></tr></table></figure><h2 id=\"resourcefilter在业务上能用来做什么\"><a class=\"anchor\" href=\"#resourcefilter在业务上能用来做什么\">#</a> ResourceFilter 在业务上能用来做什么</h2>\n<p><code>缓存</code></p>\n<p>下面实现缓存的代码以异步实现</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomAsyncResourceFilterAttribute : Attribute, IAsyncResourceFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public async Task OnResourceExecutionAsync (ResourceExecutingContext context, ResourceExecutionDelegate next)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            Console.WriteLine (&quot;执行之前 Async&quot;);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            string requestPath &#x3D; context.HttpContext.Request.Path;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            bool sign &#x3D; await RedisHelper.Do (d &#x3D;&gt; d.KeyExistsAsync (requestPath));</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            if (sign)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            &#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                string  value &#x3D; await RedisHelper.StringGetAsync (requestPath);</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                &#x2F;&#x2F; 类似于短路。context.Result 赋值后就会终止</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                context.Result &#x3D; new JsonResult (value);</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            &#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            else</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            &#123;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                &#x2F;&#x2F; 获取 action 中的结果</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                ResourceExecutedContext resource &#x3D; await next.Invoke ();</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                dynamic Result &#x3D; resource.Result;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                &#x2F;&#x2F; 缓存 20 秒</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                await RedisHelper.StringSetAsync (requestPath, Result.Value, TimeSpan.FromSeconds (20));</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                string value &#x3D; await RedisHelper.StringGetAsync (requestPath);</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                Console.WriteLine (value);</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            &#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            Console.WriteLine (&quot;执行之后 Async&quot;);</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    &#125;</pre></td></tr></table></figure><p>上面 RedisHelper 的操作类库是自己封装了一下，方便调用。<span class=\"exturl\" data-url=\"aHR0cDovLzEwNi43NS4yNDQuNzU6OTAwMi9wYWNrYWdlcy90ZWFwdXMucmVkaXMvMS4wLjA=\">redis 的 nuget 地址</span>如果服务器还没有过期</p>\n",
            "tags": [
                "Asp.net Core",
                "Asp.net Core",
                "AOP",
                "Filter"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2022/06/09/hexo-shoka%E4%B8%ADcdn.jsdelivr.net%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD/",
            "url": "https://pustea-wls.github.io/2022/06/09/hexo-shoka%E4%B8%ADcdn.jsdelivr.net%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD/",
            "title": "hexo-shoka中cdn.jsdelivr.net无法加载",
            "date_published": "2022-06-09T03:00:00.000Z",
            "content_html": "<p><code>最近访问博客后发现页面加载不出来,经过F12查看后发现是cdn.jsdelivr.net服务器挂了导致相关js加载不出来</code></p>\n<h2 id=\"问题解决\"><a class=\"anchor\" href=\"#问题解决\">#</a> 问题解决</h2>\n<h3 id=\"assetjs-文件\"><a class=\"anchor\" href=\"#assetjs-文件\">#</a> asset.js 文件</h3>\n<p>文件地址 Blog\\themes\\shoka\\scripts\\helpers\\asset.js<br />\n 将 <code>cdn.jsdelivr.net</code>  替换成  <code>fastly.jsdelivr.net</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#x2F;&#x2F;cdn.jsdelivr.net 被墙无法访问</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  &#x2F;&#x2F;let result &#x3D; vendorJs ? &#96;&lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;combine&#x2F;$&#123;vendorJs&#125;&quot;&gt;&lt;&#x2F;script&gt;&#96; : &#39;&#39;;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  &#x2F;&#x2F;return vendorJs ? htmlTag (&#39;script&#39;, &#123; src: &#96;&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;combine&#x2F;$&#123;vendorJs&#125;&#96; &#125;, &#39;&#39;) : &#39;&#39;;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  let result &#x3D; vendorJs ? &#96;&lt;script src&#x3D;&quot;&#x2F;&#x2F;fastly.jsdelivr.net&#x2F;combine&#x2F;$&#123;vendorJs&#125;&quot;&gt;&lt;&#x2F;script&gt;&#96; : &#39;&#39;;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  return vendorJs ? htmlTag (&#39;script&#39;, &#123; src: &#96;&#x2F;&#x2F;fastly.jsdelivr.net&#x2F;combine&#x2F;$&#123;vendorJs&#125;&#96; &#125;, &#39;&#39;) : &#39;&#39;;</pre></td></tr></table></figure>",
            "tags": [
                "Others",
                "Others"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2021/11/10/aspnetcore%E9%83%A8%E7%BD%B2%E5%88%B0linux/",
            "url": "https://pustea-wls.github.io/2021/11/10/aspnetcore%E9%83%A8%E7%BD%B2%E5%88%B0linux/",
            "title": "将aspnetcore项目部署到Centos8",
            "date_published": "2021-11-10T07:00:00.000Z",
            "content_html": "<p><code>aspNetCore 跨平台之后，自己弄了一台Linux服务器。想着部署到上面试试看。作为之前从未接触Linux的小白。一番折腾可不容易，记录下方便以后查阅</code></p>\n<h2 id=\"使用docker生成镜像后部署\"><a class=\"anchor\" href=\"#使用docker生成镜像后部署\">#</a> 使用 Docker 生成镜像后部署</h2>\n<p>我当前的这台服务器的版本是 <code>Centos8.3</code></p>\n<p>1. 首先我们打开自己要部署的项目，使用 vs 生成一个 DockerFile 文件</p>\n<p><img data-src=\"1.jpg\" alt=\"\" /></p>\n<p>因为我本地也已经安装过 Docker 了，所以我现在本地尝试一下</p>\n<h6 id=\"生成一个镜像\"><a class=\"anchor\" href=\"#生成一个镜像\">#</a> 生成一个镜像</h6>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker build -t aspnetcore:v1 .</pre></td></tr></table></figure><p>在这命令就踩了很多坑，最后发现默认生成的 DockFile 文件是在当前这个文件夹下面 (这边没有我已经将他去除)<br />\n<img data-src=\"2.jpg\" alt=\"\" /><br />\n <code>我们将DockerFile文件向上移动一级和.sln文件同级</code> 这样就可以成功了<br />\n<img data-src=\"7.jpg\" alt=\"\" /></p>\n<h6 id=\"运行一个容器\"><a class=\"anchor\" href=\"#运行一个容器\">#</a> 运行一个容器</h6>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d -p 8000:80 --name aspnetcoreclient aspnetcore:v1</pre></td></tr></table></figure><p>本地运行成功<br />\n<img data-src=\"3.jpg\" alt=\"\" /></p>\n<h2 id=\"部署到linux服务器上\"><a class=\"anchor\" href=\"#部署到linux服务器上\">#</a> 部署到 Linux 服务器上</h2>\n<p>作为一个 Linux 小白一些命令只能从基础学起</p>\n<h3 id=\"以下一些命令需要你已经安装了docker\"><a class=\"anchor\" href=\"#以下一些命令需要你已经安装了docker\">#</a> 以下一些命令需要你已经安装了 Docker</h3>\n<h6 id=\"linux安装-lrzsz下载文件\"><a class=\"anchor\" href=\"#linux安装-lrzsz下载文件\">#</a> Linux 安装 lrzsz (下载文件)</h6>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum install -y lrzsz</pre></td></tr></table></figure><h6 id=\"如何将本地文件上传到服务器上windows上传到linux\"><a class=\"anchor\" href=\"#如何将本地文件上传到服务器上windows上传到linux\">#</a> 如何将本地文件上传到服务器上 (windows 上传到 Linux)</h6>\n<p>在这里我连接服务器的软件是 Xshell 6<br />\n<img data-src=\"4.jpg\" alt=\"\" /><br />\n 将要上传的文件夹压缩后就可以上传了<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcXRpZ2VyL3AvMTM4NDYwNzAuaHRtbA==\">具体的操作流程</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcXRpZ2VyL3AvMTM4NDcyNDUuaHRtbA==\"> Linux 服务器上安装解压 rar 安装包操作步骤</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhaW5ubmJvdy9hcnRpY2xlL2RldGFpbHMvNTA0MjA2MDQ=\"> Linux 文件基本命令</span></p>\n<p>在 Linux 执行命令后<br />\n<img data-src=\"5.jpg\" alt=\"\" /><br />\n当前是执行在 80 端口<br />\n<img data-src=\"6.jpg\" alt=\"\" /></p>\n<p>这就是一个最简单的 asp.netCore 的发布到 Linux 的过程</p>\n",
            "tags": [
                "Docker",
                "Docker"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2021/08/30/Iview%E4%B8%AD%E7%9A%84tree%E7%BB%84%E4%BB%B6/",
            "url": "https://pustea-wls.github.io/2021/08/30/Iview%E4%B8%AD%E7%9A%84tree%E7%BB%84%E4%BB%B6/",
            "title": "使用递归遍历树形菜单下面的所有子节点",
            "date_published": "2021-08-30T00:37:49.000Z",
            "content_html": "<p>在 Iview 中使用 tree 组件遍历菜单下面的所有子节点</p>\n<h3 id=\"菜单表的数据结构\"><a class=\"anchor\" href=\"#菜单表的数据结构\">#</a> 菜单表的数据结构</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Key]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  public int Id &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  &#x2F;&#x2F; 模块</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  public string? ModuleCode &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  &#x2F;&#x2F; 类型</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  public int? Type &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  &#x2F;&#x2F; 父级</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  public int? ParentId &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  &#x2F;&#x2F; 名称</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  public string? Name &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  ......</pre></td></tr></table></figure><p><code>上面展示了菜单表的部分字段,在这里我们主要关注两个字段:Id,ParentId。上下菜单级的关联主要用到这个字段。当菜单无上级时。ParentId为-1</code></p>\n<h3 id=\"绑定到页面的数据结构\"><a class=\"anchor\" href=\"#绑定到页面的数据结构\">#</a> 绑定到页面的数据结构</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      baseData<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          expand<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          title<span class=\"token operator\">:</span> <span class=\"token string\">\"菜单管理\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h3 id=\"初始化一级菜单\"><a class=\"anchor\" href=\"#初始化一级菜单\">#</a> 初始化一级菜单</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">loadInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://localhost:5001/api/Query\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        pageSize<span class=\"token operator\">:</span> <span class=\"token number\">99999</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        pageIndex<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 遍历一级菜单</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">curr<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>parentId <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token keyword\">var</span> children <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">childernTree</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            title<span class=\"token operator\">:</span> curr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            expand<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            children<span class=\"token operator\">:</span> children<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>baseData<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h3 id=\"递归遍历下面的所有子节点\"><a class=\"anchor\" href=\"#递归遍历下面的所有子节点\">#</a> 递归遍历下面的所有子节点</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">childernTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> arry<span class=\"token punctuation\">,</span> arryChildren</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token comment\">// 找到当前当前子节点的下一级</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">curr<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> childrenArr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> curr<span class=\"token punctuation\">.</span>parentId <span class=\"token operator\">==</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token comment\">// 递归出口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> arry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      result<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">curr<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arry<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 核心 (向后面的子节点插入数据)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          arryChildren<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            title<span class=\"token operator\">:</span> curr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            expand<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          arry <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              title<span class=\"token operator\">:</span> curr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>              expand<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>              children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          arryChildren <span class=\"token operator\">=</span> arry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 当有多个同级菜单</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arry<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          arry<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            title<span class=\"token operator\">:</span> curr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            expand<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          arryChildren <span class=\"token operator\">=</span> arry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">childernTree</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> arry<span class=\"token punctuation\">,</span> arryChildren<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token keyword\">return</span> arry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h3 id=\"数据库中的数据\"><a class=\"anchor\" href=\"#数据库中的数据\">#</a> 数据库中的数据</h3>\n<p><img data-src=\"vue-tree-1.png\" alt=\"\" /></p>\n<h3 id=\"渲染到页面的数据\"><a class=\"anchor\" href=\"#渲染到页面的数据\">#</a> 渲染到页面的数据</h3>\n<p><img data-src=\"vue-tree-2.png\" alt=\"\" /></p>\n",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2021/08/28/Iview%E4%B8%AD%E7%9A%84%E6%A8%A1%E6%80%81%E6%A1%86/",
            "url": "https://pustea-wls.github.io/2021/08/28/Iview%E4%B8%AD%E7%9A%84%E6%A8%A1%E6%80%81%E6%A1%86/",
            "title": "在render函数中使用this.$Modal.confirm模态框访问不到当前vue组件实例(this指向问题)",
            "date_published": "2021-08-28T10:58:00.000Z",
            "content_html": "<p>有一个小的功能在 iview 的 table 组件中。点击删除后弹出一个模态框，接着点击确定后删除数据。<br />\n在用 render 函数时遇到一个小的问题</p>\n<h2 id=\"初始化页面数据\"><a class=\"anchor\" href=\"#初始化页面数据\">#</a> 初始化页面数据</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">loadInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://localhost:5001/api/Query\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h2 id=\"render函数中删除数据\"><a class=\"anchor\" href=\"#render函数中删除数据\">#</a> Render 函数中删除数据</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>on<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function-variable function\">click</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$Modal<span class=\"token punctuation\">.</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        title<span class=\"token operator\">:</span> <span class=\"token string\">\"确定删除吗？\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">async</span> <span class=\"token function\">onOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">var</span> <span class=\"token punctuation\">&#123;</span> code <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            method<span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token string\">\"https://localhost:5001/api/Delete\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> row<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$Message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p><img data-src=\"vue-1.png\" alt=\"\" /></p>\n<h2 id=\"将click方法修改\"><a class=\"anchor\" href=\"#将click方法修改\">#</a> 将 Click 方法修改</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>on<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function-variable function\">click</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$Modal<span class=\"token punctuation\">.</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 接受外面的变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">let</span> loadInit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadInit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        title<span class=\"token operator\">:</span> <span class=\"token string\">\"确定删除吗？\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">async</span> <span class=\"token function\">onOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">var</span> <span class=\"token punctuation\">&#123;</span> code <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            method<span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token string\">\"https://localhost:5001/api/Delete\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> row<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token function\">loadInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$Message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>             <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure>",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2021/08/14/hello-world/",
            "url": "https://pustea-wls.github.io/2021/08/14/hello-world/",
            "title": "Hello World",
            "date_published": "2021-08-14T10:08:00.000Z",
            "content_html": "<p><code>I can do all things</code></p>\n",
            "tags": [
                "Others",
                "Others"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2021/08/14/Net/Net5/",
            "url": "https://pustea-wls.github.io/2021/08/14/Net/Net5/",
            "title": "如何在Asp.net Core启动的时候，操作数据库",
            "date_published": "2021-08-14T10:08:00.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1Bc3AtbHA2ZTk3M2Vzbng5d2RzNDdjLm5ldA==\">最近在研究 Asp.net</span> Core 基于 JWT 授权码模式去实现策略授权 (根据用户的角色动态判断是否拥有对访问接口的权限). 在完成 jwt 的授权码和模拟用户，角色等数据后，想着去在策略授权的时候直接去访问数据库的数据。发现这并不容易。查找一些资料后</p>\n<h3 id=\"核心代码\"><a class=\"anchor\" href=\"#核心代码\">#</a> 核心代码</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#x2F;&#x2F; 连接字符串</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> services.AddDbContext&lt;JWTContext&gt;(options &#x3D;&gt;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> options.UseSqlServer (Configuration.GetConnectionString (&quot;JWTDBConnection&quot;)));</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> services.AddScoped&lt;IAppSettings, AppSettings&gt;();</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> &#x2F;&#x2F; 读取数据库配置策略授权 (重点)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> services.AddOptions&lt;AuthorizationOptions&gt;().Configure&lt;IServiceScopeFactory&gt;((options, sp) &#x3D;&gt;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> &#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    using (var scope &#x3D; sp.CreateScope ())</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        IAppSettings settings &#x3D; scope.ServiceProvider.GetRequiredService&lt;IAppSettings&gt;();</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        var Permission &#x3D; settings.userPermissions ();</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        options.AddPolicy (&quot;Permission&quot;, policy &#x3D;&gt; policy.Requirements.Add (Permission));</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>&#125;);</pre></td></tr></table></figure><p>查看上面的代码我们可以发现，在连接数据的下面。我们让容器中注入了一个服务:<br />\n <code>services.AddScoped&lt;IAppSettings, AppSettings&gt;()</code></p>\n<h3 id=\"定义接口\"><a class=\"anchor\" href=\"#定义接口\">#</a> 定义接口</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public interface IAppSettings  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> &#123;  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      PolicyRequirement userPermissions();  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> &#125;</pre></td></tr></table></figure><h3 id=\"实现接口\"><a class=\"anchor\" href=\"#实现接口\">#</a> 实现接口</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class AppSettings:IAppSettings</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public JWTContext context;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        public AppSettings(JWTContext context)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            this.context &#x3D; context;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        public PolicyRequirement userPermissions()</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            PolicyRequirement policyRequirement &#x3D; new PolicyRequirement();</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            var _jWTContext &#x3D; context;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            var perssions &#x3D; _jWTContext.permssions;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            var roles &#x3D; _jWTContext.roles;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            policyRequirement.DeniedAction &#x3D; new PathString(&quot;&#x2F;api&#x2F;nopermission&quot;);</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            policyRequirement.UserPermissions &#x3D; (from r in roles</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                               join p in perssions</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                               on r.Id equals p.RoleId</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                               select new UserPermission</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                               &#123;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                                   UserName &#x3D; r.Name,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                                   Url &#x3D; &quot;&#x2F;WeatherForecast&quot; + p.Permssions</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                               &#125;).ToList();</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            return policyRequirement;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        &#125;</pre></td></tr></table></figure><h3 id=\"策略授权的核心代码\"><a class=\"anchor\" href=\"#策略授权的核心代码\">#</a> 策略授权的核心代码</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class PolicyRequirement: IAuthorizationRequirement</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        &#x2F;&#x2F;&#x2F; 用户权限集合</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        public List&lt;UserPermission&gt; UserPermissions &#123; get;  set; &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        &#x2F;&#x2F;&#x2F; 无权限 action</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        public string DeniedAction &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        &#x2F;&#x2F;&#x2F; 构造</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        public PolicyRequirement ()</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            &#x2F;&#x2F; 没有权限则跳转到这个路由</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            DeniedAction &#x3D; new PathString (&quot;&#x2F;api&#x2F;nopermission&quot;);</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            &#x2F;&#x2F; 用户有权限访问的路由配置，当然可以从数据库获取</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            UserPermissions &#x3D; new List&lt;UserPermission&gt; &#123;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                              new UserPermission &#123;  Url&#x3D;&quot;&#x2F;WeatherForecast&#x2F;Tourist&quot;, UserName&#x3D;&quot;user&quot;&#125;,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                          &#125;;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    &#x2F;&#x2F;&#x2F; 用户权限承载实体</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    public class UserPermission</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        &#x2F;&#x2F;&#x2F; 用户名</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        public string UserName &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        &#x2F;&#x2F;&#x2F; 请求 Url</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        public string Url &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    &#125;</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class PolicyHandler : AuthorizationHandler&lt;PolicyRequirement&gt;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        protected override Task HandleRequirementAsync (AuthorizationHandlerContext context, PolicyRequirement requirement)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            &#x2F;&#x2F;var httpContext &#x3D; ((context.Resource) as Microsoft.AspNetCore.Routing.RouteEndpoint);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            &#x2F;&#x2F;dynamic httpContext &#x3D; context.Resource;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            var httpContext &#x3D; context.Resource as HttpContext;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            var questUrl &#x3D; httpContext.Request.Path.Value;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            &#x2F;&#x2F; 赋值用户权限</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            var userPermissions &#x3D; requirement.UserPermissions;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            &#x2F;&#x2F; 是否经过验证</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            var isAuthenticated &#x3D; context.User.Identity.IsAuthenticated;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            if (isAuthenticated)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            &#123;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                if (userPermissions.GroupBy (g &#x3D;&gt; g.Url).Any (w &#x3D;&gt; w.Key &#x3D;&#x3D; questUrl))</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                &#123;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    &#x2F;&#x2F; 用户名</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    var userName &#x3D; context.User.Claims.Where (x&#x3D;&gt;x.Type&#x3D;&#x3D;&quot;roless&quot;).First ().Value;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    if (userPermissions.Any (w &#x3D;&gt; w.UserName &#x3D;&#x3D; userName &amp;&amp; w.Url&#x3D;&#x3D; questUrl))</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    &#123;</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        context.Succeed (requirement);</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    &#125;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    else</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    &#123;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        &#x2F;&#x2F; 无权限跳转到拒绝页面</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        &#x2F;&#x2F;context.Fail ();</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        &#x2F;&#x2F;httpContext.Response.Redirect (&quot;https:&#x2F;&#x2F;localhost:5001&#x2F;api&#x2F;nopermission&quot;);</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        context.Fail ();</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        var Response &#x3D; httpContext.Response;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        var message &#x3D; Encoding.UTF8.GetBytes (&quot;User with Super Admin role cannot be edited&quot;);</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        Response.OnStarting (async () &#x3D;&gt;</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        &#123;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                            httpContext.Response.StatusCode &#x3D; 429;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                            await Response.Body.WriteAsync (message, 0, message.Length);</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        &#125;);</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    &#125;</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                &#125;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                else</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                &#123;</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    context.Succeed (requirement);</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                &#125;</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            &#125;</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            return Task.CompletedTask;</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    &#125;</pre></td></tr></table></figure>",
            "tags": [
                "Net",
                "Asp.net Core",
                "Net"
            ]
        }
    ]
}