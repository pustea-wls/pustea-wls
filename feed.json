{
    "version": "https://jsonfeed.org/version/1",
    "title": "清街余晖",
    "subtitle": "",
    "icon": "https://pustea-wls.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://pustea-wls.github.io",
    "items": [
        {
            "id": "https://pustea-wls.github.io/2021/08/14/hello-world/",
            "url": "https://pustea-wls.github.io/2021/08/14/hello-world/",
            "title": "Hello World",
            "date_published": "2021-08-14T10:08:00.000Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<pre><code class=\"language-bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<pre><code class=\"language-bash\">$ hexo server\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<pre><code class=\"language-bash\">$ hexo generate\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<pre><code class=\"language-bash\">$ hexo deploy\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "Net"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2021/08/14/Net/Net5/",
            "url": "https://pustea-wls.github.io/2021/08/14/Net/Net5/",
            "title": "如何在Asp.net Core启动的时候，操作数据库",
            "date_published": "2021-08-14T10:08:00.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1Bc3AtbHA2ZTk3M2Vzbng5d2RzNDdjLm5ldA==\">最近在研究 Asp.net</span> Core 基于 JWT 授权码模式去实现策略授权 (根据用户的角色动态判断是否拥有对访问接口的权限). 在完成 jwt 的授权码和模拟用户，角色等数据后，想着去在策略授权的时候直接去访问数据库的数据。发现这并不容易。查找一些资料后</p>\n<h3 id=\"核心代码\"><a class=\"anchor\" href=\"#核心代码\">#</a> 核心代码</h3>\n<pre><code class=\"language-bash\">             //连接字符串\n            services.AddDbContext&lt;JWTContext&gt;(options =&gt;\n            options.UseSqlServer(Configuration.GetConnectionString(&quot;JWTDBConnection&quot;)));\n\n            services.AddScoped&lt;IAppSettings, AppSettings&gt;();\n\n            //读取数据库配置策略授权(重点)\n            services.AddOptions&lt;AuthorizationOptions&gt;().Configure&lt;IServiceScopeFactory&gt;((options, sp) =&gt;\n            &#123;\n              using (var scope = sp.CreateScope())\n           &#123;\n              IAppSettings settings = scope.ServiceProvider.GetRequiredService&lt;IAppSettings&gt;();\n              var Permission = settings.userPermissions();\n              options.AddPolicy(&quot;Permission&quot;, policy =&gt; policy.Requirements.Add(Permission));\n           &#125;\n           &#125;);\n</code></pre>\n<p>查看上面的代码我们可以发现，在连接数据的下面。我们让容器中注入了一个服务:<br />\n[services.AddScoped&lt;IAppSettings, AppSettings&gt;();]</p>\n<h3 id=\"定义接口\"><a class=\"anchor\" href=\"#定义接口\">#</a> 定义接口</h3>\n<pre><code class=\"language-bash\"> public interface IAppSettings  \n &#123;  \n      PolicyRequirement userPermissions();  \n &#125;\n</code></pre>\n<h3 id=\"实现接口\"><a class=\"anchor\" href=\"#实现接口\">#</a> 实现接口</h3>\n<pre><code class=\"language-bash\">public class AppSettings:IAppSettings\n    &#123;\n        public JWTContext context;\n\n        public AppSettings(JWTContext context)\n        &#123;\n            this.context = context;\n        &#125;\n\n        public PolicyRequirement userPermissions()\n        &#123;\n            PolicyRequirement policyRequirement = new PolicyRequirement();\n\n            var _jWTContext = context;\n            var perssions = _jWTContext.permssions;\n            var roles = _jWTContext.roles;\n            policyRequirement.DeniedAction = new PathString(&quot;/api/nopermission&quot;);\n            policyRequirement.UserPermissions = (from r in roles\n                               join p in perssions\n                               on r.Id equals p.RoleId\n                               select new UserPermission\n                               &#123;\n                                   UserName = r.Name,\n                                   Url = &quot;/WeatherForecast&quot; + p.Permssions\n                               &#125;).ToList();\n\n\n            return policyRequirement;\n        &#125;\n</code></pre>\n<h3 id=\"策略授权的核心代码\"><a class=\"anchor\" href=\"#策略授权的核心代码\">#</a> 策略授权的核心代码</h3>\n<pre><code class=\"language-bash\">public class PolicyRequirement: IAuthorizationRequirement\n    &#123;\n\n        /// &lt;summary&gt;\n        /// 用户权限集合\n        /// &lt;/summary&gt;\n        public List&lt;UserPermission&gt; UserPermissions &#123; get;  set; &#125;\n        /// &lt;summary&gt;\n        /// 无权限action\n        /// &lt;/summary&gt;\n        public string DeniedAction &#123; get; set; &#125;\n        /// &lt;summary&gt;\n        /// 构造\n        /// &lt;/summary&gt;\n        public PolicyRequirement()\n        &#123;\n\n            //没有权限则跳转到这个路由\n            DeniedAction = new PathString(&quot;/api/nopermission&quot;);\n            //用户有权限访问的路由配置,当然可以从数据库获取\n            UserPermissions = new List&lt;UserPermission&gt; &#123;\n                              new UserPermission &#123;  Url=&quot;/WeatherForecast/Tourist&quot;, UserName=&quot;user&quot;&#125;,\n                          &#125;;\n        &#125;\n    &#125;\n\n\n\n    /// &lt;summary&gt;\n    /// 用户权限承载实体\n    /// &lt;/summary&gt;\n    public class UserPermission\n    &#123;\n        /// &lt;summary&gt;\n        /// 用户名\n        /// &lt;/summary&gt;\n        public string UserName &#123; get; set; &#125;\n        /// &lt;summary&gt;\n        /// 请求Url\n        /// &lt;/summary&gt;\n        public string Url &#123; get; set; &#125;\n    &#125;\n</code></pre>\n<pre><code class=\"language-bash\">public class PolicyHandler : AuthorizationHandler&lt;PolicyRequirement&gt;\n    &#123;\n\n\n        protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, PolicyRequirement requirement)\n        &#123;\n            //var httpContext = ((context.Resource) as Microsoft.AspNetCore.Routing.RouteEndpoint);\n            //dynamic httpContext = context.Resource;\n\n            var httpContext = context.Resource as HttpContext;\n\n            var questUrl = httpContext.Request.Path.Value;\n\n            //赋值用户权限\n            var userPermissions = requirement.UserPermissions;\n            //是否经过验证\n            var isAuthenticated = context.User.Identity.IsAuthenticated;\n\n            if (isAuthenticated)\n            &#123;\n                if (userPermissions.GroupBy(g =&gt; g.Url).Any(w =&gt; w.Key == questUrl))\n                &#123;\n                    //用户名\n                    var userName = context.User.Claims.Where(x=&gt;x.Type==&quot;roless&quot;).First().Value;\n                    if (userPermissions.Any(w =&gt; w.UserName == userName &amp;&amp; w.Url== questUrl))\n                    &#123;\n                        context.Succeed(requirement);\n                    &#125;\n                    else\n                    &#123;\n                        //无权限跳转到拒绝页面\n                        //context.Fail();\n                        //httpContext.Response.Redirect(&quot;https://localhost:5001/api/nopermission&quot;);\n                        context.Fail();\n                        var Response = httpContext.Response;\n                        var message = Encoding.UTF8.GetBytes(&quot;User with Super Admin role cannot be edited&quot;);\n\n                        Response.OnStarting(async () =&gt;\n                        &#123;\n                            httpContext.Response.StatusCode = 429;\n                            await Response.Body.WriteAsync(message, 0, message.Length);\n                        &#125;);\n                    &#125;\n                &#125;\n                else\n                &#123;\n                    context.Succeed(requirement);\n                &#125;\n\n            &#125;\n            return Task.CompletedTask;\n        &#125;\n    &#125;\n</code></pre>\n",
            "tags": [
                "Net",
                "Net",
                "Asp.net Core"
            ]
        }
    ]
}