{
    "version": "https://jsonfeed.org/version/1",
    "title": "清街余晖",
    "subtitle": "",
    "icon": "https://pustea-wls.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://pustea-wls.github.io",
    "items": [
        {
            "id": "https://pustea-wls.github.io/2022/09/27/Quartz.net%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8C%81%E4%B9%85%E5%8C%96%E4%B8%8E%E9%9B%86%E7%BE%A4/",
            "url": "https://pustea-wls.github.io/2022/09/27/Quartz.net%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8C%81%E4%B9%85%E5%8C%96%E4%B8%8E%E9%9B%86%E7%BE%A4/",
            "title": "Quartz.net实现数据库持久化与集群",
            "date_published": "2022-09-27T08:00:00.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<blockquote>\n<p><code>Quartz.NET是一个强大、开源、轻量的作业调度框架,你能够用它来为执行一个作业而创建简单的或复杂的作业调度.</code></p>\n</blockquote>\n<h2 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h2>\n<blockquote>\n<p>下面记录一下通过<code>JobStores</code>实现数据的持久化</p>\n</blockquote>\n<h2 id=\"什么是jobstores\"><a class=\"anchor\" href=\"#什么是jobstores\">#</a> 什么是 JobStores？</h2>\n<blockquote>\n<p>JobStore 负责记录你提供到调度器的所有 “工作数据”：<br />\n所有的 Job、所有的 Trigger、所有的 Calendar (org.quartz.Calendar) 等等.<br />\n 为你的 Quartz 调度器选择一个合适的 JobStore 是一个重要的步骤.<br />\n 幸运的是，一旦你明白不同的 JobStore 之间的差异，那么作出合适的选择是十分简单的.(官方翻译)</p>\n</blockquote>\n<h3 id=\"quartznet提供了两种jobstoreramjobstoreadojobstore\"><a class=\"anchor\" href=\"#quartznet提供了两种jobstoreramjobstoreadojobstore\">#</a> Quartz.net 提供了两种 JobStore:RAMJobStore,AdoJobStore.</h3>\n<blockquote>\n<ul>\n<li>RAMJobStore:RAMJobStore 是最简单的 JobStore，顾名思义这种 JobStore 将所有的数据都存放在内存中，这也是它运行速度快的原因，但是弊端也很明显：一旦应用结束或者遇到断电所有的数据都会丢失.(默认的方式)</li>\n<li>AdoJobStore：AdoJobStore 通过 Ado.net 将数据存储在数据库中，因此可以解决断电数据丢失的问题，但是因为要读写数据库所以效率相对较低.</li>\n</ul>\n</blockquote>\n<h2 id=\"选择adojobstore实现数据持久化\"><a class=\"anchor\" href=\"#选择adojobstore实现数据持久化\">#</a> 选择 AdoJobStore 实现数据持久化</h2>\n<h3 id=\"第一步添加数据库\"><a class=\"anchor\" href=\"#第一步添加数据库\">#</a> 第一步：添加数据库</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3F1YXJ0em5ldC9xdWFydHpuZXQvdHJlZS9tYWluL2RhdGFiYXNlL3RhYmxlcw==\">脚本地址</span><br />\n选择自己对应的数据库脚本，我这里选择的是 sqlserver<br />\n<img data-src=\"2.jpg\" alt=\"\" /><br />\n 执行脚本之后生成表<br />\n<img data-src=\"1.png\" alt=\"\" /></p>\n<h3 id=\"第二步配置调度器工厂stdschedulerfactory属性\"><a class=\"anchor\" href=\"#第二步配置调度器工厂stdschedulerfactory属性\">#</a> 第二步配置调度器工厂 (StdSchedulerFactory) 属性</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>private Task&lt;IScheduler&gt; GetScheduler ()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            &#x2F;&#x2F; 获取链接数据库字符串</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            string connStr &#x3D; AppsettingExtend.Get (&quot;ConnectionStrings&quot;, &quot;DBConnection&quot;);</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            if (_scheduler !&#x3D; null)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                return _scheduler;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            else</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            &#123;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                var properties &#x3D; new NameValueCollection</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    &#x2F;&#x2F; 这个时间大于 10000（10 秒）会导致 MISFIRE_INSTRUCTION_DO_NOTHING 不起作用 (不加这句 MISFIRE_INSTRUCTION_DO_NOTHING 不生效？？？)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    [&quot;quartz.jobStore.misfireThreshold&quot;]&#x3D;&quot;1000&quot;,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    &#x2F;&#x2F;scheduler 名字</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    [&quot;quartz.scheduler.instanceName&quot;] &#x3D; &quot;MyScheduler&quot;,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    &#x2F;&#x2F; 线程池个数</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    [&quot;quartz.threadPool.threadCount&quot;] &#x3D; &quot;20&quot;,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    &#x2F;&#x2F; 类型为 JobStoreXT, 事务</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    [&quot;quartz.jobStore.type&quot;] &#x3D; &quot;Quartz.Impl.AdoJobStore.JobStoreTX, Quartz&quot;,</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    &#x2F;&#x2F;JobDataMap 中的数据都是字符串</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    [&quot;quartz.jobStore.useProperties&quot;] &#x3D; &quot;true&quot;,</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    &#x2F;&#x2F; 数据源名称</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    [&quot;quartz.jobStore.dataSource&quot;] &#x3D; &quot;myDS&quot;,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    &#x2F;&#x2F; 数据表名前缀</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    [&quot;quartz.jobStore.tablePrefix&quot;] &#x3D; &quot;QRTZ_&quot;,</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    &#x2F;&#x2F; 使用 Sqlserver 的 Ado 操作代理类</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    [&quot;quartz.jobStore.driverDelegateType&quot;] &#x3D; &quot;Quartz.Impl.AdoJobStore.SqlServerDelegate, Quartz&quot;,</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    &#x2F;&#x2F; 数据源连接字符串</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    [&quot;quartz.dataSource.myDS.connectionString&quot;] &#x3D; connStr,</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    &#x2F;&#x2F; 数据源的数据库</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    [&quot;quartz.dataSource.myDS.provider&quot;] &#x3D; &quot;SqlServer&quot;,</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    &#x2F;&#x2F; 序列化类型</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    [&quot;quartz.serializer.type&quot;] &#x3D; &quot;json&quot;,&#x2F;&#x2F;binary</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    &#x2F;&#x2F; 自动生成 scheduler 实例 ID，主要为了保证集群中的实例具有唯一标识</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    [&quot;quartz.scheduler.instanceId&quot;] &#x3D; &quot;AUTO&quot;,</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    &#x2F;&#x2F; 是否配置集群</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    [&quot;quartz.jobStore.clustered&quot;] &#x3D; &quot;true&quot;,</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                &#125;;</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                &#x2F;&#x2F; 实例化工厂</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                ISchedulerFactory sf &#x3D; new StdSchedulerFactory (properties);</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                this._scheduler &#x3D; sf.GetScheduler ();</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                return _scheduler;</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            &#125;</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        &#125;</pre></td></tr></table></figure><p>通过上面的配置就实现了数据的持久化和集群.</p>\n<h3 id=\"解决每次程序重新启动都会立即触发一次crontrigger类型的job\"><a class=\"anchor\" href=\"#解决每次程序重新启动都会立即触发一次crontrigger类型的job\">#</a> 解决每次程序重新启动都会立即触发一次 cronTrigger 类型的 job</h3>\n<blockquote>\n<p>例如我们 cron 是  <code>0/10 * * * * ? *</code> . 在每次整秒触发 (17:20:00,17:20:10,17:20:20 .....)<br />\n 但是我们的程序在 17:21:08 启动这个时候会立即触发一次.<br />\n 这不符合我们的预期。我们的预期是在启动的下一个周期节点再触发 (17:21:10)<br />\n 这个时候我加了 <code>misfire机制</code></p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>private TriggerBuilder CronBuilder (TriggerBuilder builder, Jobs jobInfo)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            string cron &#x3D; jobInfo.CronExpression;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            &#x2F;&#x2F; 例如 2022&#x2F;09&#x2F;26 10:00 执行，此时 tigger 是暂停状态.10:01 恢复。上次的不执行，忽略</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            &#x2F;&#x2F; 错过了忽略</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            builder.WithCronSchedule (cron, x &#x3D;&gt; x.WithMisfireHandlingInstructionDoNothing ());</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            return builder;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &#125;</pre></td></tr></table></figure><p>但是发现并不生效，最后发现要加一句配置 (上面第二步)</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#x2F;&#x2F; 这个时间大于 10000（10 秒）会导致 MISFIRE_INSTRUCTION_DO_NOTHING 不起作用 (不加这句 MISFIRE_INSTRUCTION_DO_NOTHING 不生效？？？)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    [&quot;quartz.jobStore.misfireThreshold&quot;]&#x3D;&quot;1000&quot;,</pre></td></tr></table></figure><h3 id=\"集群\"><a class=\"anchor\" href=\"#集群\">#</a> 集群</h3>\n<p>集群也是在上面的第二步就行配置 (true 是集群，false 则反之)</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[&quot;quartz.jobStore.clustered&quot;] &#x3D; &quot;true&quot;</pre></td></tr></table></figure><p>在 bin 目录下复制一个 dubug 副本<br />\n<img data-src=\"3.jpg\" alt=\"\" /><br />\n通过 dotnet 命令开启两个程序</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dotnet DotentCore.Quarzt.Web.dll --urls https:&#x2F;&#x2F;0.0.0.0:50002</pre></td></tr></table></figure><p><img data-src=\"4.jpg\" alt=\"\" /></p>\n<h4 id=\"演示非集群\"><a class=\"anchor\" href=\"#演示非集群\">#</a> 演示非集群</h4>\n<video id=\"mmedia-yRzjMpQEgvThNvsH\" controls=true vide=\"video\" src=\"20220927_150139.mp4\" width=\"100%\" ></video>\n<blockquote>\n<p><font color=\"green\">可以看出会出现重复执行，并且一台程序 (服务器) 关闭之后。另外程序 (服务器) 一台并不会自动执行</font></p>\n</blockquote>\n<h4 id=\"演示集群\"><a class=\"anchor\" href=\"#演示集群\">#</a> 演示集群</h4>\n<video id=\"mmedia-hYbsqSRAjuPhGUas\" controls=true vide=\"video\" src=\"20220927_150825.mp4\" width=\"100%\" ></video>\n<blockquote>\n<p><font color=\"green\">可以看出没有出现重复执行，并且一台程序 (服务器) 关闭之后。另外一台程序 (服务器) 开始自动执行，这种机制大大增加了任务调度的容灾性能.</font></p>\n</blockquote>\n<h3 id=\"参考文档\"><a class=\"anchor\" href=\"#参考文档\">#</a> 参考文档</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc3ByaW5nc25vdy9wLzEzMTU4NzI2Lmh0bWwjX2xhYmVsNA==\">参考 1</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmJzbWF4LmNvbS9BL2tlNWpwbFhYenIv\"> 参考 2</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNjUwMDk5P2Zyb209MTA2ODA=\"> 参考 3</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucXVhcnR6LXNjaGVkdWxlci5uZXQvZG9jdW1lbnRhdGlvbi8=\"> 参考 4</span></p>\n",
            "tags": [
                "Quartz",
                "Asp.net Core",
                "Quartz"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2022/09/27/hexo-shoka%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/",
            "url": "https://pustea-wls.github.io/2022/09/27/hexo-shoka%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/",
            "title": "hexo-shoka主题记录",
            "date_published": "2022-09-27T03:00:00.000Z",
            "content_html": "<h1 id=\"支持html标签\"><a class=\"anchor\" href=\"#支持html标签\">#</a> 支持 html 标签</h1>\n<h2 id=\"找到配置文件_configyml\"><a class=\"anchor\" href=\"#找到配置文件_configyml\">#</a> 找到配置文件 (_config.yml)</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>markdown:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  render: # 渲染器设置</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    html: true # 过滤 HTML 标签</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    xhtmlOut: true # 使用 &#39;&#x2F;&#39; 来闭合单标签 （比如 &lt;br &#x2F;&gt;）。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    breaks: true # 转换段落里的 &#39;\\n&#39; 到 &lt;br&gt;。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    linkify: true # 将类似 URL 的文本自动转换为链接。</pre></td></tr></table></figure><h2 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h2>\n<blockquote>\n<p>将<code>html</code>修改为<code>true</code></p>\n</blockquote>\n<h1 id=\"修改字体的默认颜色\"><a class=\"anchor\" href=\"#修改字体的默认颜色\">#</a> 修改字体的默认颜色</h1>\n<h2 id=\"找到css文件\"><a class=\"anchor\" href=\"#找到css文件\">#</a> 找到 css 文件</h2>\n<blockquote>\n<ul>\n<li>路径为 /themes/shoka/source/css/_colors.styl</li>\n</ul>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--primary-color: var (--color-red);</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>例如:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  --primary-color: green;</pre></td></tr></table></figure><h2 id=\"结论-2\"><a class=\"anchor\" href=\"#结论-2\">#</a> 结论</h2>\n<blockquote>\n<p>修改想要的颜色 (<code>--color-red</code>_colors.styl 文件中定义好的)</p>\n</blockquote>\n",
            "tags": [
                "Others",
                "Others"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2022/09/07/docker%E9%83%A8%E7%BD%B2aspnetcore+vue/",
            "url": "https://pustea-wls.github.io/2022/09/07/docker%E9%83%A8%E7%BD%B2aspnetcore+vue/",
            "title": "Docker部署aspnetcore+vue",
            "date_published": "2022-09-07T02:00:00.000Z",
            "content_html": "<p><code>记录将aspnetcore+sqlserver+redis+vue通过docker部署到linux服务器</code></p>\n<h2 id=\"环境\"><a class=\"anchor\" href=\"#环境\">#</a> 环境</h2>\n<ul>\n<li>后端:.Net5+Sqlserver</li>\n<li>前端: Vue2</li>\n<li>服务器：Centos8.3</li>\n</ul>\n<h2 id=\"发布vue\"><a class=\"anchor\" href=\"#发布vue\">#</a> 发布 vue</h2>\n<ul>\n<li>拉取 nginx 镜像</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker pull nginx</pre></td></tr></table></figure><ul>\n<li>基于 nginx 镜像运行一个容器</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run --name teapusnginx -itd -p 8080:80 nginx</pre></td></tr></table></figure><ul>\n<li>查看所有容器</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker ps -a</pre></td></tr></table></figure><p><img data-src=\"1.jpg\" alt=\"\" /><br />\n创建的容器正常运行了</p>\n<ul>\n<li>拷贝 nginx 的配置文件到主机 (当前 linux 服务器), 为文件映射做准备 (这样做的好处后面介绍)</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker cp 容器名 &#x2F; 容器 Id：要拷贝的文件在容器里面的路径  要拷贝到宿主机的相应路径</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker cp teapusnginx:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf  &#x2F;root&#x2F;teapus&#x2F;frondEnd&#x2F;nginx&#x2F;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker cp teapusnginx:&#x2F;etc&#x2F;nginx&#x2F;conf.d &#x2F;root&#x2F;teapus&#x2F;frondEnd&#x2F;nginx&#x2F;conf&#x2F;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker cp teapusnginx:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html &#x2F;root&#x2F;teapus&#x2F;frondEnd&#x2F;nginx&#x2F;html</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>docker cp teapusnginx:&#x2F;var&#x2F;log&#x2F;nginx&#x2F; &#x2F;root&#x2F;teapus&#x2F;frondEnd&#x2F;nginx&#x2F;logs&#x2F;</pre></td></tr></table></figure><p><code>上面的命令就是将刚刚创建的名称是teapusnginx容器的配置文件复制到主机上</code> <br />\n<img data-src=\"2.jpg\" alt=\"\" /></p>\n<ul>\n<li>停止删除容器 (刚刚创建的 teapusnginx)</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker stop teapusnginx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker rm teapusnginx</pre></td></tr></table></figure><ul>\n<li>重新运行容器 (映射相应的文件目录)</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d  --name teapusnginx -p 8080:80 -v &#x2F;root&#x2F;teapus&#x2F;frondEnd&#x2F;nginx&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf -v &#x2F;root&#x2F;teapus&#x2F;frondEnd&#x2F;nginx&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx -v &#x2F;root&#x2F;teapus&#x2F;frondEnd&#x2F;nginx&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html -v &#x2F;root&#x2F;teapus&#x2F;frondEnd&#x2F;nginx&#x2F;conf&#x2F;conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d --privileged&#x3D;true     -e TZ&#x3D;Asia&#x2F;Shanghai nginx</pre></td></tr></table></figure><ul>\n<li>打包 vue (根据自己的项目设置环境变量此处应该是正式环境)</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm run build</pre></td></tr></table></figure><ul>\n<li>复制打包后的 dist 文件夹内容放到主机的 html 目录<br />\n<img data-src=\"3.jpg\" alt=\"\" /></li>\n</ul>\n<p><code>注意:这样以后每次发布只需要将打包的dist文件夹中的内容放到主机的html文件夹中就可以。不需要重新构建镜像和运行容器。方便快捷了很多</code></p>\n<h2 id=\"发布后端\"><a class=\"anchor\" href=\"#发布后端\">#</a> 发布后端</h2>\n<h3 id=\"构建aspnetcore发布包\"><a class=\"anchor\" href=\"#构建aspnetcore发布包\">#</a> 构建 aspnetcore 发布包</h3>\n<ul>\n<li>\n<p>构建 dockerfile 文件<br />\n vs 中右键项目 -&gt; 添加 -&gt;Docker 支持。将生成的 dockerfile 文件复制到项目的根目录 (生成的 dockerfile 文件内容中有路径问题后续构建镜像会报错)<br />\n!(构建 dockerfile 详见)[<a href=\"https://pustea-wls.github.io/pustea-wls/2021/11/10/aspnetcore%E9%83%A8%E7%BD%B2%E5%88%B0linux/\">https://pustea-wls.github.io/pustea-wls/2021/11/10/aspnetcore 部署到 linux/</a>]</p>\n</li>\n<li>\n<p>添加 nuget 配置<br />\n因为我的项目中用到自己搭建的 nuget 包所以需要加 nuget 配置。如果你的项目都是 nuget.org 的包此步骤可以忽略<br />\n在 dockerfile 文件中加上一句配置<br />\n<img data-src=\"4.jpg\" alt=\"\" /><br />\n将 NuGet.config 文件放到项目的根目录<br />\n<img data-src=\"5.jpg\" alt=\"\" /><br />\n NuGet.config 内容</p>\n</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;configuration&gt;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  &lt;solution&gt;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    &lt;add key&#x3D;&quot;disableSourceControlIntegration&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  &lt;&#x2F;solution&gt;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  &lt;packageRestore&gt;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    &lt;add key&#x3D;&quot;enabled&quot; value&#x3D;&quot;True&quot; &#x2F;&gt;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &lt;add key&#x3D;&quot;automatic&quot; value&#x3D;&quot;True&quot; &#x2F;&gt;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  &lt;&#x2F;packageRestore&gt;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  &lt;bindingRedirects&gt;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    &lt;add key&#x3D;&quot;skip&quot; value&#x3D;&quot;False&quot; &#x2F;&gt;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  &lt;&#x2F;bindingRedirects&gt;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  &lt;packageSources&gt;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    &lt;add key&#x3D;&quot;nuget.org&quot; value&#x3D;&quot;https:&#x2F;&#x2F;api.nuget.org&#x2F;v3&#x2F;index.json&quot; protocolVersion&#x3D;&quot;3&quot; &#x2F;&gt;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    &lt;add key&#x3D;&quot;teapus&quot; value&#x3D;&quot;http:&#x2F;&#x2F;106.75.244.75:9002&#x2F;v3&#x2F;index.json&quot; &#x2F;&gt;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  &lt;&#x2F;packageSources&gt;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>&lt;&#x2F;configuration&gt;</pre></td></tr></table></figure><ul>\n<li>文件复制到 linux 服务器<br />\n<img data-src=\"6.jpg\" alt=\"\" /></li>\n</ul>\n<h3 id=\"构建sqlserver容器\"><a class=\"anchor\" href=\"#构建sqlserver容器\">#</a> 构建 sqlserver 容器</h3>\n<ul>\n<li>拉取 sqlserver 镜像</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker pull mcr.microsoft.com&#x2F;mssql&#x2F;server:2017-latest</pre></td></tr></table></figure><ul>\n<li>运行 sqlserver 容器</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -e &#39;ACCEPT_EULA&#x3D;Y&#39; -e &#39;SA_PASSWORD &#x3D; 你的 8 位密码（含大小写字母和数字）&#39; -p 1433:1433 -d mcr.microsoft.com&#x2F;mssql&#x2F;server:2017-latest</pre></td></tr></table></figure><p><code>注意:密码少于8位生成的容器运行几秒后就会停止，故请设置大小写字母和数字混合的8位密码。</code></p>\n<p>现在你可以通过 linux 的主机 ip+sa (管理员账号)+ 设置的密码 (SA_PASSWORD = 你的 8 位密码（含大小写字母和数字）) 访问数据库<br />\n<img data-src=\"7.jpg\" alt=\"\" /></p>\n<h3 id=\"构建redis通信\"><a class=\"anchor\" href=\"#构建redis通信\">#</a> 构建 redis 通信</h3>\n<ul>\n<li>构建一个可以让容器相互通信的网络</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 创建网络</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker network create -d bridge redis-net</pre></td></tr></table></figure><ul>\n<li>运行 redis 容器</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 自动下载 redis 镜像并运行</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> docker run -itd --name redis_service --network redis-net redis</pre></td></tr></table></figure><ul>\n<li>修改 net core 项目中的配置<br />\n<img data-src=\"8.jpg\" alt=\"\" /></li>\n</ul>\n<h3 id=\"发布aspnetcore\"><a class=\"anchor\" href=\"#发布aspnetcore\">#</a> 发布 aspnetcore</h3>\n<ul>\n<li>进入 dockerfile 文件夹</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd &#x2F;root&#x2F;teapus&#x2F;rearEnd&#x2F;AuthorizationServer</pre></td></tr></table></figure><ul>\n<li>构建镜像</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker build -t authorizationserver:v1 .</pre></td></tr></table></figure><ul>\n<li>运行容器<br />\n docker run -itd --name authorizationclient --network redis-net -p 5006:80 authorizationserver:v1</li>\n</ul>\n<h2 id=\"演示效果\"><a class=\"anchor\" href=\"#演示效果\">#</a> 演示效果</h2>\n<p><video id=\"mmedia-hNgYLmyGVNBkjJQe\" controls=true vide=\"video\" src=\"20220907_104643.mp4\" width=\"100%\" ></video></p>\n",
            "tags": [
                "Docker",
                "Vue",
                "Asp.net Core",
                "Docker"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2022/08/25/SignaIR+Vue%E5%AE%9E%E7%8E%B0%E8%81%8A%E5%A4%A9%E5%8A%9F%E8%83%BD/",
            "url": "https://pustea-wls.github.io/2022/08/25/SignaIR+Vue%E5%AE%9E%E7%8E%B0%E8%81%8A%E5%A4%A9%E5%8A%9F%E8%83%BD/",
            "title": "SignaIR+Vue实现聊天功能",
            "date_published": "2022-08-25T03:00:00.000Z",
            "content_html": "<p>记录一下后台使用 SignaIR, 前台使用 Vue 实现一对一的聊天功能</p>\n<h2 id=\"效果展示\"><a class=\"anchor\" href=\"#效果展示\">#</a> 效果展示</h2>\n<p><video id=\"mmedia-MPlMwsdHpBhpcUcW\" controls=true vide=\"video\" src=\"20220825_103842.mp4\" width=\"100%\" ></video></p>\n<h2 id=\"signair后端实现\"><a class=\"anchor\" href=\"#signair后端实现\">#</a> SignaIR 后端实现</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1hc3AtdTMzZXY3cjl5eGZ0dnlmZjJwbC5uZXQ=\">后端的环境是 asp.net</span> core。版本是.net5，ORM 是 EFCore</p>\n<h3 id=\"实现思路\"><a class=\"anchor\" href=\"#实现思路\">#</a> 实现思路</h3>\n<p>我本地 SignaIR 的实现是基于之前自己写的后端管理 demo. 已经有了用户表以及 jwt 的令牌授权认证。<br />\n所以会将每次客户端连接 SignaIR 后端服务的 ConnectionId 保存在对应的用户表字段里。来达到 SignaIR 的<br />\n ConnectionId 与登录用户对应</p>\n<h3 id=\"创建一个chathub类\"><a class=\"anchor\" href=\"#创建一个chathub类\">#</a> 创建一个 ChatHub 类</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Route (&quot;&#x2F;chatHub&quot;)]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    public class ChatHub:Hub</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        private readonly ChatMessageController _chatMessage;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        private readonly IHttpContextAccessor _httpContextAccessor;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        public ChatHub (ChatMessageController chatMessage, IHttpContextAccessor httpContextAccessor) </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            _chatMessage &#x3D; chatMessage;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            _httpContextAccessor &#x3D; httpContextAccessor;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        public async Task SendMessage (int userId, int targetUserId, string message)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            &#x2F;&#x2F; 找到发送消息的人员</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            List&lt;string&gt; connectionIds &#x3D; _chatMessage.GetConnectionIds (userId, targetUserId).Where (x&#x3D;&gt;!string.IsNullOrWhiteSpace (x)).ToLis ();</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            &#x2F;&#x2F; 发送消息的模型</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            var sendMessages &#x3D; _chatMessage.SendMessage (userId, targetUserId, message);</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>           &#x2F;&#x2F; 发送消息给对应的客户端 (用户)</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            await Clients.Clients (connectionIds).SendAsync (&quot;ReceiveMessage&quot;, sendMessages);</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        &#x2F;&#x2F;&#x2F; 当有新的客户端会触发此方法</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        public override async Task OnConnectedAsync ()</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            var accessToken &#x3D; _httpContextAccessor.HttpContext.Request.Query [&quot;access_token&quot;];</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            &#x2F;&#x2F; 应用的项目已经使用了 jwt 令牌。vue 前端要传 header。后续的前端实现会写到</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            var userName &#x3D; _httpContextAccessor.HttpContext.User.Claims.Where (x &#x3D;&gt; x.Type &#x3D;&#x3D; &quot;userName&quot;).FirstOrDefault ()?.Value;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            &#x2F;&#x2F; 将登陆的用户 connectionId 更新到数据库</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            await _chatMessage.UpdateSignaIRConnectionId (userName, Context.ConnectionId);</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            &#x2F;&#x2F; 重新连接初始化聊天历史记录 (现在没用到，前端会调用另外的接口初始化历史记录)</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            var chatMessages &#x3D; _chatMessage.InitMessage (userName);</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            &#x2F;&#x2F;await Clients.Client (Context.ConnectionId).SendAsync (&quot;ReceiveMessage&quot;, chatMessages);</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    public class SendMessage </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        public DateTime Date &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        public string Message &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        public int SendUserId &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        public int RecvieUserId &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        public int UserId &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        public string Name &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        public string Avatar &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    &#125;</pre></td></tr></table></figure><h3 id=\"数据库发送消息的实体\"><a class=\"anchor\" href=\"#数据库发送消息的实体\">#</a> 数据库发送消息的实体</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public  class ChatMessage:Entity</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        [Key]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        public int Id &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &#x2F;&#x2F;&#x2F; 发送者用户 Id</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        public int SendUserId &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        &#x2F;&#x2F;&#x2F; 接受者用户 Id</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        public int ReceiveUserId &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        &#x2F;&#x2F;&#x2F; 该消息拥有者</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        public int UserId &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        &#x2F;&#x2F;&#x2F; 发送的消息</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        public string Message &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        &#x2F;&#x2F;&#x2F; 消息阅读状态 0 未阅读，1 已阅读</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        public int ReadState &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        &#x2F;&#x2F;&#x2F; 消息位置 1 右侧，2 左侧</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        public int Side &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    &#125;</pre></td></tr></table></figure><h3 id=\"数据库消息记录\"><a class=\"anchor\" href=\"#数据库消息记录\">#</a> 数据库消息记录</h3>\n<p><img data-src=\"1.png\" alt=\"\" /></p>\n<h3 id=\"后端配置\"><a class=\"anchor\" href=\"#后端配置\">#</a> 后端配置</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public void ConfigureServices (IServiceCollection services)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   services.AddAuthentication (JwtBearerDefaults.AuthenticationScheme)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   .AddJwtBearer (options &#x3D;&gt;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      options.Events &#x3D; new JwtBearerEvents</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          &#x2F;&#x2F; 添加接收消息时的事件</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          OnMessageReceived &#x3D; context &#x3D;&gt;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>              var accessToken &#x3D; context.Request.Query [&quot;access_token&quot;];</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              var path &#x3D; context.HttpContext.Request.Path;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>             if (!string.IsNullOrWhiteSpace (accessToken))&#x2F;&#x2F; 这里可以修改为你相应的 hub 地址</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              &#123;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                 context.Token &#x3D; accessToken;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>               &#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>             return Task.CompletedTask;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         &#125;,</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     &#125;;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    &#125;)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        &#x2F;&#x2F;SignalR</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        services.AddSignalR ();</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        &#x2F;&#x2F; 注入聊天</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        services.AddScoped&lt;ChatMessageController&gt;();</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> &#125;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    public void Configure (IApplicationBuilder app, IWebHostEnvironment env)</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            app.UseEndpoints (endpoints &#x3D;&gt;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            &#123;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                endpoints.MapControllers ();</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                &#x2F;&#x2F;signaIR (对应创建的 chatHub 类)</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                endpoints.MapHub&lt;ChatHub&gt;(&quot;&#x2F;chatHub&quot;);</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            &#125;);</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    &#125;</pre></td></tr></table></figure><h2 id=\"vue前端实现\"><a class=\"anchor\" href=\"#vue前端实现\">#</a> Vue 前端实现</h2>\n<h3 id=\"前端的聊天显示组件是jwchat\"><a class=\"anchor\" href=\"#前端的聊天显示组件是jwchat\">#</a> 前端的聊天显示组件是 JwChat</h3>\n<p>组件具体用法<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlZ2kuZ2l0ZWUuaW8vandjaGF0ZG9jL2d1aWRlL3N0YXJ0Lmh0bWw=\"> JwChat</span></p>\n<h3 id=\"安装和使用signair\"><a class=\"anchor\" href=\"#安装和使用signair\">#</a> 安装和使用 SignaIR</h3>\n<ul>\n<li>npm 安装</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install @microsoft&#x2F;signalr</pre></td></tr></table></figure><ul>\n<li>引入 SignaIR</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>const signalR &#x3D; require(&quot;@microsoft&#x2F;signalr&quot;);</pre></td></tr></table></figure><h3 id=\"前端代码实现对jwchat样式进行了一些修改\"><a class=\"anchor\" href=\"#前端代码实现对jwchat样式进行了一些修改\">#</a> 前端代码实现 (对 JwChat 样式进行了一些修改)</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;template&gt;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  &lt;div&gt;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    &lt;JwChat-index</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      ref&#x3D;&quot;jwChat&quot;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      :taleList&#x3D;&quot;list&quot;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      v-model&#x3D;&quot;inputMsg&quot;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      @enter&#x3D;&quot;bindEnter&quot;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      height&#x3D;&quot;630px&quot;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      width&#x3D;&quot;100%&quot;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      :scrollType&#x3D;&quot;scrollType&quot;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      :config&#x3D;&quot;config&quot;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      :winBarConfig&#x3D;&quot;winBarConfig&quot;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      :showRightBox&#x3D;&quot;true&quot;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    &gt;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    &lt;&#x2F;JwChat-index&gt;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  &lt;&#x2F;div&gt;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>&lt;&#x2F;template&gt;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>&lt;script&gt;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>const signalR &#x3D; require (&quot;@microsoft&#x2F;signalr&quot;);</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>import &#123; method, fetch &#125; from &quot;..&#x2F;..&#x2F;network&#x2F;request.js&quot;;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>const listData &#x3D; [</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  &#123;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    &#x2F;&#x2F;date: &quot;&quot;,</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    &#x2F;&#x2F;text: &#123; text: &quot;起床不&quot; &#125;,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    &#x2F;&#x2F;mine: false,</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    &#x2F;&#x2F;name: &quot;woris&quot;,</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    &#x2F;&#x2F;img: &quot;http:&#x2F;&#x2F;106.75.244.75:82&#x2F;upload&#x2F;2022-08-17&#x2F;20220817023058.png&quot;,</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  &#125;,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>];</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>function getListArr (size) &#123;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  const listSize &#x3D; listData.length;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  if (!size) &#123;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    size &#x3D; listSize;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  let result &#x3D; [];</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  for (let i &#x3D; 0; i &lt; size; i++) &#123;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    const item &#x3D; listData [i]; &#x2F;&#x2F;[Math.random ()*listSize&gt;&gt;0]</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    item.id &#x3D; Math.random ().toString (16).substr (-6);</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    result.push (item);</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  return result;</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>export default &#123;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  data () &#123;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    return &#123;</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      inputMsg: &quot;&quot;,</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      list: [],</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      connection: &quot;&quot;,</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      scrollType: &quot;scroll&quot;,</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      _state: this.state,</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      friendId: 0,</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      config: &#123;</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        img: &quot;&quot;,</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        name: &quot;好友聊天&quot;,</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        dept: &quot;&quot;,</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      &#125;,</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      winBarConfig: &#123;</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        active: &quot;win01&quot;,</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        width: &quot;160px&quot;,</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        listHeight: &quot;60px&quot;,</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        list: [&#123;&#125;],</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        callback: this.bindWinBar,</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      &#125;,</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    &#125;;</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  &#125;,</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  props: &#123;</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    state: &#123;</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      type: Boolean,</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      default: false,</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    &#125;,</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  &#125;,</pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  watch: &#123;</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    state: &#123;</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>      immediate: true,</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      handler () &#123;</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        &#x2F;&#x2F;this.$nextTick (() &#x3D;&gt; &#123;</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        &#x2F;&#x2F;   this.$refs.jwChat.$refs.chatList.scrollBottom ();</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        &#x2F;&#x2F; &#125;);</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      &#125;,</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    &#125;,</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  &#125;,</pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  methods: &#123;</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    &#x2F;&#x2F; 发送消息</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    bindEnter (e) &#123;</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      &#x2F;&#x2F;this.$refs.jwChat.$refs.chatList.scrollBottom ();</pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>      if (this.friendId&#x3D;&#x3D;0)&#123;</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>         this.$Message.error (&quot;请选择好友后发送&quot;)</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>         return</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>      const msg &#x3D; this.inputMsg;</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>      if (!msg) return;</pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>      &#x2F;&#x2F; 模拟两个人聊天</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>      let UserId &#x3D; this.$store.state.user.id;</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>      let targetUserId &#x3D; this.friendId;</pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>      this.connection</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        .invoke (&quot;SendMessage&quot;, UserId, targetUserId, msg)</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        .catch (function (err) &#123;</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>          return console.error (err.toString ());</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        &#125;);</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    &#125;,</pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    &#x2F;&#x2F; 收到消息</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    ReceiveMessage (messages) &#123;</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>      &#x2F;&#x2F;this.$refs.jwChat.$refs.chatList.scrollBottom ();</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>      let UserId &#x3D; this.$store.state.user.id;</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>      messages.forEach ((message) &#x3D;&gt; &#123;</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        &#x2F;&#x2F; 不加后面的判断同时发会消息错乱</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        if (UserId &#x3D;&#x3D; message.userId &amp;&amp; ((this.friendId&#x3D;&#x3D;message.sendUserId &amp;&amp; UserId&#x3D;&#x3D;message.recvieUserId) ||(this.friendId&#x3D;&#x3D;message.recvieUserId &amp;&amp; UserId&#x3D;&#x3D;message.sendUserId) )) &#123;</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>          const msgObj &#x3D; &#123;</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            date: message.date,</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            text: &#123; text: message.message &#125;,</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            mine: message.sendUserId &#x3D;&#x3D; UserId,</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            name: message.name,</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            img: message.avatar,</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>          &#125;;</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>          this.list.push (msgObj);</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>      &#125;);</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    &#125;,</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    &#x2F;&#x2F; 初始化服务器连接</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    initSignaIRConnection () &#123;</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>      let token &#x3D; this.$store.state.accessToken;</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>      &#x2F;&#x2F; 连接 signaIR</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>      this.connection &#x3D; new signalR.HubConnectionBuilder ()</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        .withAutomaticReconnect () &#x2F;&#x2F; 断开重新连接</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        .withUrl (</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>          &quot;https:&#x2F;&#x2F;localhost:5001&#x2F;chatHub&quot;,</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>          &#x2F;&#x2F; &#123;</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>          &#x2F;&#x2F;   skipNegotiation: true,</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>          &#x2F;&#x2F;   transport: signalR.HttpTransportType.WebSockets,</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>          &#x2F;&#x2F; &#125;</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>          &#123; accessTokenFactory: () &#x3D;&gt; token &#125; &#x2F;&#x2F; 带上令牌</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        )</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        .build ();</pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>      this.connection</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        .start ()</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        .then (() &#x3D;&gt; &#123;</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>          this.$Message.success (&quot;连接聊天成功&quot;);</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        &#125;)</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        .catch ((e) &#x3D;&gt; &#123;</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>          this.$Message.error (&quot;连接聊天失败&quot;);</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        &#125;);</pre></td></tr><tr><td data-num=\"151\"></td><td><pre></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>      &#x2F;&#x2F; 注册方法</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>      this.connection.on (&quot;ReceiveMessage&quot;, this.ReceiveMessage);</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>      &#x2F;&#x2F;this.connection.on (&quot;NewConnection&quot;, this.NewConnection);</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    &#125;,</pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    &#x2F;&#x2F; 初始化好友</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    async initFriends () &#123;</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>      let &#123; code, data &#125; &#x3D; await fetch (</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        method.GET,</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        &quot;https:&#x2F;&#x2F;localhost:5001&#x2F;frineds&quot;,</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>          userName: this.$store.state.user.name,</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>      );</pre></td></tr><tr><td data-num=\"166\"></td><td><pre></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>      this.winBarConfig.list &#x3D; data.map ((item) &#x3D;&gt; &#123;</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        return &#123;</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>          id: item.id,</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>          img: item.avatar,</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>          name: item.name,</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>          dept: &quot;&quot;,</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>          readNum: 0,</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        &#125;;</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>      &#125;);</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    &#125;,</pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>    &#x2F;&#x2F; 好友聊天记录</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    async frinedsChatMessages (friendId) &#123;</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>      let UserId &#x3D; this.$store.state.user.id;</pre></td></tr><tr><td data-num=\"181\"></td><td><pre>      let &#123; code, data &#125; &#x3D; await fetch (</pre></td></tr><tr><td data-num=\"182\"></td><td><pre>        method.GET,</pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        &quot;https:&#x2F;&#x2F;localhost:5001&#x2F;frinedsChatMessage&quot;,</pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"185\"></td><td><pre>          friendId: friendId,</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>          owerId: this.$store.state.user.id,</pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"188\"></td><td><pre>      );</pre></td></tr><tr><td data-num=\"189\"></td><td><pre></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>      this.list &#x3D; data.map ((message) &#x3D;&gt; &#123;</pre></td></tr><tr><td data-num=\"191\"></td><td><pre>        return &#123;</pre></td></tr><tr><td data-num=\"192\"></td><td><pre>          date: message.date,</pre></td></tr><tr><td data-num=\"193\"></td><td><pre>          text: &#123; text: message.message &#125;,</pre></td></tr><tr><td data-num=\"194\"></td><td><pre>          mine: message.sendUserId &#x3D;&#x3D; UserId,</pre></td></tr><tr><td data-num=\"195\"></td><td><pre>          name: message.name,</pre></td></tr><tr><td data-num=\"196\"></td><td><pre>          img: message.avatar,</pre></td></tr><tr><td data-num=\"197\"></td><td><pre>        &#125;;</pre></td></tr><tr><td data-num=\"198\"></td><td><pre>      &#125;);</pre></td></tr><tr><td data-num=\"199\"></td><td><pre>    &#125;,</pre></td></tr><tr><td data-num=\"200\"></td><td><pre></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>    async bindWinBar (play &#x3D; &#123;&#125;) &#123;</pre></td></tr><tr><td data-num=\"202\"></td><td><pre>      const &#123; type, data &#x3D; &#123;&#125; &#125; &#x3D; play;</pre></td></tr><tr><td data-num=\"203\"></td><td><pre>      console.log (play);</pre></td></tr><tr><td data-num=\"204\"></td><td><pre>      if (type &#x3D;&#x3D;&#x3D; &quot;winBar&quot;) &#123;</pre></td></tr><tr><td data-num=\"205\"></td><td><pre>        const &#123; id, dept, name, img &#125; &#x3D; data;</pre></td></tr><tr><td data-num=\"206\"></td><td><pre>        this.config &#x3D; &#123; ...this.config, id, dept, name, img &#125;;</pre></td></tr><tr><td data-num=\"207\"></td><td><pre>        this.winBarConfig.active &#x3D; id;</pre></td></tr><tr><td data-num=\"208\"></td><td><pre></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>        &#x2F;&#x2F; 好友</pre></td></tr><tr><td data-num=\"210\"></td><td><pre>        this.friendId &#x3D; id;</pre></td></tr><tr><td data-num=\"211\"></td><td><pre>        &#x2F;&#x2F; 加载化聊天记录</pre></td></tr><tr><td data-num=\"212\"></td><td><pre>        await this.frinedsChatMessages (id);</pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        &#x2F;&#x2F;this.list &#x3D; getListArr ();</pre></td></tr><tr><td data-num=\"214\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"215\"></td><td><pre>    &#125;,</pre></td></tr><tr><td data-num=\"216\"></td><td><pre></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>    DomInit () &#123;</pre></td></tr><tr><td data-num=\"218\"></td><td><pre>      var chat &#x3D; document.querySelector (&quot;.chatPage .web__main&quot;);</pre></td></tr><tr><td data-num=\"219\"></td><td><pre>      &#x2F;&#x2F;  console.info (  window.getComputedStyle (chat,null)[&quot;transform&quot;]);</pre></td></tr><tr><td data-num=\"220\"></td><td><pre>      &#x2F;&#x2F;chat.hight &#x3D; &quot;0px&quot;;</pre></td></tr><tr><td data-num=\"221\"></td><td><pre>      console.info (chat);</pre></td></tr><tr><td data-num=\"222\"></td><td><pre>    &#125;,</pre></td></tr><tr><td data-num=\"223\"></td><td><pre>  &#125;,</pre></td></tr><tr><td data-num=\"224\"></td><td><pre></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>  async created () &#123;</pre></td></tr><tr><td data-num=\"226\"></td><td><pre>    this.$nextTick (async () &#x3D;&gt; &#123;</pre></td></tr><tr><td data-num=\"227\"></td><td><pre>      await this.initFriends ();</pre></td></tr><tr><td data-num=\"228\"></td><td><pre>    &#125;);</pre></td></tr><tr><td data-num=\"229\"></td><td><pre>    this.initSignaIRConnection ();</pre></td></tr><tr><td data-num=\"230\"></td><td><pre>  &#125;,</pre></td></tr><tr><td data-num=\"231\"></td><td><pre></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>  mounted () &#123;</pre></td></tr><tr><td data-num=\"233\"></td><td><pre>    &#x2F;&#x2F;this.list &#x3D; getListArr ();</pre></td></tr><tr><td data-num=\"234\"></td><td><pre>    this.$nextTick (() &#x3D;&gt; &#123;</pre></td></tr><tr><td data-num=\"235\"></td><td><pre>      &#x2F;&#x2F;this.$refs.jwChat.scrollBottom ();</pre></td></tr><tr><td data-num=\"236\"></td><td><pre>      &#x2F;&#x2F;console.info (this.$refs.jwChat.$refs.chatList);</pre></td></tr><tr><td data-num=\"237\"></td><td><pre>      &#x2F;&#x2F;this.$refs.jwChat.$refs.chatList.loadDone ();</pre></td></tr><tr><td data-num=\"238\"></td><td><pre>    &#125;);</pre></td></tr><tr><td data-num=\"239\"></td><td><pre>  &#125;,</pre></td></tr><tr><td data-num=\"240\"></td><td><pre>&#125;;</pre></td></tr><tr><td data-num=\"241\"></td><td><pre>&lt;&#x2F;script&gt;</pre></td></tr><tr><td data-num=\"242\"></td><td><pre>&lt;style lang&#x3D;&quot;scss&quot;&gt;</pre></td></tr><tr><td data-num=\"243\"></td><td><pre>.ChatPage &#123;</pre></td></tr><tr><td data-num=\"244\"></td><td><pre>  margin: 0px !important;</pre></td></tr><tr><td data-num=\"245\"></td><td><pre>  display: flex !important;</pre></td></tr><tr><td data-num=\"246\"></td><td><pre>  .header &#123;</pre></td></tr><tr><td data-num=\"247\"></td><td><pre>    display: none !important;</pre></td></tr><tr><td data-num=\"248\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"249\"></td><td><pre>  .rightBox &#123;</pre></td></tr><tr><td data-num=\"250\"></td><td><pre>    display: none !important;</pre></td></tr><tr><td data-num=\"251\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"252\"></td><td><pre></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>  .winBar &#123;</pre></td></tr><tr><td data-num=\"254\"></td><td><pre>    position: relative !important;</pre></td></tr><tr><td data-num=\"255\"></td><td><pre>    transform: translateX (0px) !important;</pre></td></tr><tr><td data-num=\"256\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"257\"></td><td><pre>  .main &#123;</pre></td></tr><tr><td data-num=\"258\"></td><td><pre>    display: block !important;</pre></td></tr><tr><td data-num=\"259\"></td><td><pre>    width: 100% !important;</pre></td></tr><tr><td data-num=\"260\"></td><td><pre>    height: 100% !important;</pre></td></tr><tr><td data-num=\"261\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"262\"></td><td><pre>  .chatPage &#123;</pre></td></tr><tr><td data-num=\"263\"></td><td><pre>    height: 100% !important;</pre></td></tr><tr><td data-num=\"264\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"265\"></td><td><pre>  .chatBox &#123;</pre></td></tr><tr><td data-num=\"266\"></td><td><pre>    height: 100% !important;</pre></td></tr><tr><td data-num=\"267\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"268\"></td><td><pre></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>  .scroller &#123;</pre></td></tr><tr><td data-num=\"270\"></td><td><pre>    &#x2F;&#x2F;border: 1px solid green;</pre></td></tr><tr><td data-num=\"271\"></td><td><pre>    &#x2F;&#x2F;overflow: scroll !important;</pre></td></tr><tr><td data-num=\"272\"></td><td><pre></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>    .bscroll-indicator &#123;</pre></td></tr><tr><td data-num=\"274\"></td><td><pre>      display: none;</pre></td></tr><tr><td data-num=\"275\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"276\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"277\"></td><td><pre></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>  .scroller::-webkit-scrollbar &#123;</pre></td></tr><tr><td data-num=\"279\"></td><td><pre>    width: 0 !important;</pre></td></tr><tr><td data-num=\"280\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"281\"></td><td><pre>  .taleBox &#123;</pre></td></tr><tr><td data-num=\"282\"></td><td><pre>    &#x2F;&#x2F;overflow: scroll !important;</pre></td></tr><tr><td data-num=\"283\"></td><td><pre>    .wrapper::-webkit-scrollbar &#123;</pre></td></tr><tr><td data-num=\"284\"></td><td><pre>      &#x2F;* 滚动条整体样式 *&#x2F;</pre></td></tr><tr><td data-num=\"285\"></td><td><pre>      width: 10px;</pre></td></tr><tr><td data-num=\"286\"></td><td><pre>      &#x2F;* 高宽分别对应横竖滚动条的尺寸 *&#x2F;</pre></td></tr><tr><td data-num=\"287\"></td><td><pre>      height: 1px;</pre></td></tr><tr><td data-num=\"288\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"289\"></td><td><pre></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>    .wrapper::-webkit-scrollbar-thumb &#123;</pre></td></tr><tr><td data-num=\"291\"></td><td><pre>      &#x2F;* 滚动条里面小方块 *&#x2F;</pre></td></tr><tr><td data-num=\"292\"></td><td><pre>      border-radius: 0px 10px 10px 0px;</pre></td></tr><tr><td data-num=\"293\"></td><td><pre>      background-color: #b176c5;</pre></td></tr><tr><td data-num=\"294\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"295\"></td><td><pre></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>    .wrapper::-webkit-scrollbar-track &#123;</pre></td></tr><tr><td data-num=\"297\"></td><td><pre>      &#x2F;* 滚动条里面轨道 *&#x2F;</pre></td></tr><tr><td data-num=\"298\"></td><td><pre>      -webkit-box-shadow: inset 0 0 5px rgba (0, 0, 0, 0);</pre></td></tr><tr><td data-num=\"299\"></td><td><pre>      background: rgba (255, 255, 255, 0.4);</pre></td></tr><tr><td data-num=\"300\"></td><td><pre>      border-radius: 0px 10px 10px 0px;</pre></td></tr><tr><td data-num=\"301\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"302\"></td><td><pre>    &#x2F;* 兼容 IE*&#x2F;</pre></td></tr><tr><td data-num=\"303\"></td><td><pre>    .wrapper &#123;</pre></td></tr><tr><td data-num=\"304\"></td><td><pre>      -ms-scroll-chaining: chained;</pre></td></tr><tr><td data-num=\"305\"></td><td><pre>      -ms-overflow-style: none;</pre></td></tr><tr><td data-num=\"306\"></td><td><pre>      -ms-content-zooming: zoom;</pre></td></tr><tr><td data-num=\"307\"></td><td><pre>      -ms-scroll-rails: none;</pre></td></tr><tr><td data-num=\"308\"></td><td><pre>      -ms-content-zoom-limit-min: 100%;</pre></td></tr><tr><td data-num=\"309\"></td><td><pre>      -ms-content-zoom-limit-max: 500%;</pre></td></tr><tr><td data-num=\"310\"></td><td><pre>      -ms-scroll-snap-type: proximity;</pre></td></tr><tr><td data-num=\"311\"></td><td><pre>      -ms-scroll-snap-points-x: snapList (100%, 200%, 300%, 400%, 500%);</pre></td></tr><tr><td data-num=\"312\"></td><td><pre>      -ms-overflow-style: none;</pre></td></tr><tr><td data-num=\"313\"></td><td><pre>      overflow: auto;</pre></td></tr><tr><td data-num=\"314\"></td><td><pre>      border: 1px solid #b176c5;</pre></td></tr><tr><td data-num=\"315\"></td><td><pre>      width: 100% !important;</pre></td></tr><tr><td data-num=\"316\"></td><td><pre>      height: 100% !important;</pre></td></tr><tr><td data-num=\"317\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"318\"></td><td><pre>    &#x2F;&#x2F;.wrapper &#123;</pre></td></tr><tr><td data-num=\"319\"></td><td><pre>    &#x2F;&#x2F;   border: 1px solid green;</pre></td></tr><tr><td data-num=\"320\"></td><td><pre>    &#x2F;&#x2F;   overflow: scroll !important;</pre></td></tr><tr><td data-num=\"321\"></td><td><pre>    &#x2F;&#x2F;   overflow-y: none;</pre></td></tr><tr><td data-num=\"322\"></td><td><pre>    &#x2F;&#x2F; &#125;</pre></td></tr><tr><td data-num=\"323\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"324\"></td><td><pre>  .toolBox &#123;</pre></td></tr><tr><td data-num=\"325\"></td><td><pre>    border: 1px dashed #b176c5;</pre></td></tr><tr><td data-num=\"326\"></td><td><pre>    border-top: none;</pre></td></tr><tr><td data-num=\"327\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"328\"></td><td><pre></pre></td></tr><tr><td data-num=\"329\"></td><td><pre>  &#x2F;&#x2F;.web__main</pre></td></tr><tr><td data-num=\"330\"></td><td><pre>  &#x2F;&#x2F; &#123;</pre></td></tr><tr><td data-num=\"331\"></td><td><pre>  &#x2F;&#x2F;  transition-timing-function: cubic-bezier (0.165, 0.84, 0.44, 1) !important;</pre></td></tr><tr><td data-num=\"332\"></td><td><pre>  &#x2F;&#x2F;   transition-property: transform !important;</pre></td></tr><tr><td data-num=\"333\"></td><td><pre>  &#x2F;&#x2F;   transition-duration: 0ms !important;</pre></td></tr><tr><td data-num=\"334\"></td><td><pre>  &#x2F;&#x2F;   transform: translateX (0px) translateY (-1591px) translateZ (1px) !important;</pre></td></tr><tr><td data-num=\"335\"></td><td><pre>  &#x2F;&#x2F; &#125;</pre></td></tr><tr><td data-num=\"336\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"337\"></td><td><pre></pre></td></tr><tr><td data-num=\"338\"></td><td><pre>&#x2F;&#x2F;.ivu-drawer-body &#123;</pre></td></tr><tr><td data-num=\"339\"></td><td><pre>&#x2F;&#x2F;   overflow: scroll !important;</pre></td></tr><tr><td data-num=\"340\"></td><td><pre>&#x2F;&#x2F; &#125;</pre></td></tr><tr><td data-num=\"341\"></td><td><pre>&lt;&#x2F;style&gt;</pre></td></tr></table></figure>",
            "tags": [
                "SignaIR",
                "Vue",
                "Asp.net Core",
                "SignaIR"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2022/08/02/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1aspnetcore/",
            "url": "https://pustea-wls.github.io/2022/08/02/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1aspnetcore/",
            "title": "nginx负载均衡aspnetcore",
            "date_published": "2022-08-02T02:00:00.000Z",
            "content_html": "<h2 id=\"使用docker部署两个aspnetcore项目\"><a class=\"anchor\" href=\"#使用docker部署两个aspnetcore项目\">#</a> 使用 Docker 部署两个 aspnetcore 项目</h2>\n<p><a href=\"https://pustea-wls.github.io/pustea-wls/2021/11/10/aspnetcore%E9%83%A8%E7%BD%B2%E5%88%B0linux/\">docker 部署 aspnetcore 项目</a></p>\n<p>两个项目已经部署好了<br />\n<img data-src=\"1.jpg\" alt=\"\" /></p>\n<h2 id=\"使用docker部署nginx\"><a class=\"anchor\" href=\"#使用docker部署nginx\">#</a> 使用 Docker 部署 Nginx</h2>\n<h3 id=\"拉取nginx镜像\"><a class=\"anchor\" href=\"#拉取nginx镜像\">#</a> 拉取 nginx 镜像</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker pull nginx:latest</pre></td></tr></table></figure><h3 id=\"运行容器\"><a class=\"anchor\" href=\"#运行容器\">#</a> 运行容器</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run --name mynginx -p 8889:80 -d nginx</pre></td></tr></table></figure><p><img data-src=\"2.jpg\" alt=\"\" /></p>\n<h2 id=\"nginx配置负载均衡\"><a class=\"anchor\" href=\"#nginx配置负载均衡\">#</a> Nginx 配置负载均衡</h2>\n<h3 id=\"将nginx容器内部的配置文件复制到linux本地\"><a class=\"anchor\" href=\"#将nginx容器内部的配置文件复制到linux本地\">#</a> 将 nginx 容器内部的配置文件复制到 linux 本地</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker cp 容器名：要拷贝的文件在容器里面的路径  要拷贝到宿主机的相应路径 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker cp mynginx:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;root&#x2F;advanced&#x2F;nginx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker cp mynginx:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf&#x2F;root&#x2F;advanced&#x2F;nginx</pre></td></tr></table></figure><p><img data-src=\"3.jpg\" alt=\"\" /></p>\n<h3 id=\"将confd文件夹下面的defaultconf进行修改\"><a class=\"anchor\" href=\"#将confd文件夹下面的defaultconf进行修改\">#</a> 将 conf.d 文件夹下面的 default.conf 进行修改</h3>\n<p><img data-src=\"4.jpg\" alt=\"\" /></p>\n<h3 id=\"重新运行nginx容器\"><a class=\"anchor\" href=\"#重新运行nginx容器\">#</a> 重新运行 nginx 容器</h3>\n<p>将之前的 nginx 删除</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker kill mynginx -- 杀死 mynginx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker rm mynginx   -- 删除 mynginx</pre></td></tr></table></figure><p><code>将本地配置文件映射到nginx容器</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d --name mynginx -p 8889:80 -v &#x2F;root&#x2F;advanced&#x2F;nginx&#x2F;conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d -v &#x2F;root&#x2F;advanced&#x2F;nginx&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf --privileged&#x3D;true nginx</pre></td></tr></table></figure><p><video id=\"mmedia-IfEGuqtxxLSJfNOm\" controls=true vide=\"video\" src=\"20220802_101456.mp4\" width=\"100%\" ></video></p>\n",
            "tags": [
                "Nginx",
                "Asp.net Core",
                "Docker",
                "Nginx"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2022/07/14/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BAuthorizationFilter/",
            "url": "https://pustea-wls.github.io/2022/07/14/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BAuthorizationFilter/",
            "title": "aspnetcore过滤器系列五：AuthorizationFilter",
            "date_published": "2022-07-14T07:00:00.000Z",
            "content_html": "<h1 id=\"一鉴权授权的常见应用背景业务和技术角度\"><a class=\"anchor\" href=\"#一鉴权授权的常见应用背景业务和技术角度\">#</a> 一：鉴权授权的常见应用背景 (业务和技术角度)</h1>\n<h6 id=\"1授权是在用户注册登录某一系统后-有部分本来不可用的功能可以访问了-鉴权授权二者把保护资源这件事分成两步来完成\"><a class=\"anchor\" href=\"#1授权是在用户注册登录某一系统后-有部分本来不可用的功能可以访问了-鉴权授权二者把保护资源这件事分成两步来完成\">#</a> 1. 授权是在用户注册登录某一系统后。有部分本来不可用的功能可以访问了。鉴权授权二者把保护资源这件事分成两步来完成</h6>\n<h6 id=\"2为了保护服务器端资源\"><a class=\"anchor\" href=\"#2为了保护服务器端资源\">#</a> 2. 为了保护服务器端资源</h6>\n<h6 id=\"3因为http协议无状态-多个请求之前-相互独立之前没有任关系-服务器不知道那些用户已经登录或者没有登录-鉴权授权就是让多个请求响应之前建立连写\"><a class=\"anchor\" href=\"#3因为http协议无状态-多个请求之前-相互独立之前没有任关系-服务器不知道那些用户已经登录或者没有登录-鉴权授权就是让多个请求响应之前建立连写\">#</a> 3. 因为 Http 协议：无状态 --- 多个请求之前 --- 相互独立，之前没有任关系。服务器不知道那些用户已经登录，或者没有登录 --- 鉴权授权就是让多个请求响应之前建立连写</h6>\n<h1 id=\"二最常见的授权seesiooncookies\"><a class=\"anchor\" href=\"#二最常见的授权seesiooncookies\">#</a> 二：最常见的授权 (Seesioon+Cookies)</h1>\n<h6 id=\"1客户端带上用户名密码请求服务端服务端生成一个seesion响应客户端的时候返回一个seesionid\"><a class=\"anchor\" href=\"#1客户端带上用户名密码请求服务端服务端生成一个seesion响应客户端的时候返回一个seesionid\">#</a> 1. 客户端带上用户名 + 密码请求服务端，服务端生成一个 Seesion 响应客户端的时候返回一个 SeesionId</h6>\n<h6 id=\"2客户端将seesionid保护在cookies中-再次请求的时候就会带上cookies中sessionid\"><a class=\"anchor\" href=\"#2客户端将seesionid保护在cookies中-再次请求的时候就会带上cookies中sessionid\">#</a> 2. 客户端将 SeesionId 保护在 Cookies 中。再次请求的时候就会带上 Cookies 中 SessionId</h6>\n<h6 id=\"3服务器拿到客户端请求的seesioni判段是否是之前分发出去的seesionid-鉴权\"><a class=\"anchor\" href=\"#3服务器拿到客户端请求的seesioni判段是否是之前分发出去的seesionid-鉴权\">#</a> 3. 服务器拿到客户端请求的 SeesionI 判段是否是之前分发出去的 SeesionId --- 鉴权</h6>\n<h6 id=\"4有seesionid就表示已经登录过后面根据seesionid查找出用户信息-根据用户信息作出判断当前的用户是否可以去访问某些资源\"><a class=\"anchor\" href=\"#4有seesionid就表示已经登录过后面根据seesionid查找出用户信息-根据用户信息作出判断当前的用户是否可以去访问某些资源\">#</a> 4. 有 SeesionId 就表示已经登录过，后面根据 SeesionId 查找出用户信息。根据用户信息作出判断，当前的用户是否可以去访问某些资源</h6>\n<h1 id=\"三为什么使用jwt进行鉴权授权\"><a class=\"anchor\" href=\"#三为什么使用jwt进行鉴权授权\">#</a> 三：为什么使用 Jwt 进行鉴权授权</h1>\n<h6 id=\"1现在大型的互联网系统开发中通常会用到集群和分布式以达到系统的处理能力\"><a class=\"anchor\" href=\"#1现在大型的互联网系统开发中通常会用到集群和分布式以达到系统的处理能力\">#</a> 1. 现在大型的互联网系统开发中通常会用到集群和分布式以达到系统的处理能力</h6>\n<h6 id=\"2多个请求之前可能会被分发到不同的服务器进行处理-这导致可能除了发放seesionid的那台服务器外-其他服务器并不能处理这个seesionid\"><a class=\"anchor\" href=\"#2多个请求之前可能会被分发到不同的服务器进行处理-这导致可能除了发放seesionid的那台服务器外-其他服务器并不能处理这个seesionid\">#</a> 2. 多个请求之前可能会被分发到不同的服务器进行处理。这导致可能除了发放 SeesionId 的那台服务器外。其他服务器并不能处理这个 SeesionId.</h6>\n<h6 id=\"3对于上述2的问题-会有一些解决办法-例如共享内存-所有的服务器都从共享内存读取数据-但seesion存储在服务器上也是有一定的开销并且cookies并不安全\"><a class=\"anchor\" href=\"#3对于上述2的问题-会有一些解决办法-例如共享内存-所有的服务器都从共享内存读取数据-但seesion存储在服务器上也是有一定的开销并且cookies并不安全\">#</a> 3. 对于上述 2 的问题。会有一些解决办法。例如共享内存。所有的服务器都从共享内存读取数据。但 Seesion 存储在服务器上也是有一定的开销，并且 Cookies 并不安全</h6>\n<h1 id=\"四aspnetcore鉴权授权分为两步\"><a class=\"anchor\" href=\"#四aspnetcore鉴权授权分为两步\">#</a> 四：AspNetCore 鉴权授权分为两步</h1>\n<h6 id=\"1鉴权搜集请求过来的代表用户身份的标识数据-解析用户身份数据-处理-写入到上下文\"><a class=\"anchor\" href=\"#1鉴权搜集请求过来的代表用户身份的标识数据-解析用户身份数据-处理-写入到上下文\">#</a> 1. 鉴权：搜集请求过来的代表用户身份的标识数据 --- 解析用户身份数据 --- 处理 --- 写入到上下文</h6>\n<h6 id=\"2授权根据用户身份信息来判断是否允许你请求\"><a class=\"anchor\" href=\"#2授权根据用户身份信息来判断是否允许你请求\">#</a> 2. 授权：根据用户身份信息来判断是否允许你请求</h6>\n<h1 id=\"五authorize-标记就表示要授权\"><a class=\"anchor\" href=\"#五authorize-标记就表示要授权\">#</a> 五：Authorize--- 标记就表示要授权</h1>\n<h6 id=\"1authenticationschemes-需要明确通过那个方案哪个渠道来授权-方案渠道-cookiesjwt等\"><a class=\"anchor\" href=\"#1authenticationschemes-需要明确通过那个方案哪个渠道来授权-方案渠道-cookiesjwt等\">#</a> 1.AuthenticationSchemes--- 需要明确通过那个方案 (哪个渠道来授权)--- 方案 / 渠道 Cookies,Jwt 等</h6>\n<h6 id=\"2标记authorize如果不指定authenticationschemes默认的就是cookies\"><a class=\"anchor\" href=\"#2标记authorize如果不指定authenticationschemes默认的就是cookies\">#</a> 2. 标记 Authorize 如果不指定 AuthenticationSchemes 默认的就是 Cookies</h6>\n<h6 id=\"3role角色授权\"><a class=\"anchor\" href=\"#3role角色授权\">#</a> 3.Role 角色授权</h6>\n<h6 id=\"4policy策略授权\"><a class=\"anchor\" href=\"#4policy策略授权\">#</a> 4.Policy 策略授权</h6>\n<h1 id=\"六使用cookies进行鉴权授权\"><a class=\"anchor\" href=\"#六使用cookies进行鉴权授权\">#</a> 六：使用 Cookies 进行鉴权授权</h1>\n<ul>\n<li>在鉴权授权之前我们需要生成用户的相关信息和授权渠道</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[HttpGet]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public void Login (string name,string password) </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     var claims &#x3D; new List&lt;Claim&gt;()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         &#x2F;&#x2F; 里面的载体可以记录一些用户相关信息</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         new Claim (ClaimTypes.Role,&quot;Admin&quot;),</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         new Claim (&quot;Name&quot;,name)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     &#125;;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     ClaimsPrincipal userPrincipal &#x3D; new ClaimsPrincipal (new ClaimsIdentity (claims, &quot;Customer&quot;));</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     &#x2F;&#x2F; 授权渠道为 Cookies</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     HttpContext.SignInAsync (CookieAuthenticationDefaults.AuthenticationScheme, userPrincipal, new AuthenticationProperties</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     &#123;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         ExpiresUtc &#x3D; DateTime.UtcNow.AddSeconds (60) &#x2F;&#x2F; 过期时间 60 秒</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     &#125;).Wait ()</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     var user &#x3D; HttpContext.User;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>&#125;</pre></td></tr></table></figure><ul>\n<li>在需要授权你的 action 标注上</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Route (&quot;&#x2F;api&#x2F;[action]&quot;)]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public class AuthorizeController:ControllerBase</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   [HttpGet]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   [Authorize] &#x2F;&#x2F; 如果只标记了 authorize, 只需要解析到用户信息。就可以进行访问</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   public string AuthorizeIndex () </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       return &quot;authoize&quot;;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   &#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    [HttpGet]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    public string Default () </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      return &quot;授权失败默认跳转接口&quot;;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>&#125;</pre></td></tr></table></figure><ul>\n<li>\n<p>运行项目调用 api, 报错<br />\n<img data-src=\"authorizationFilter-1.jpg\" alt=\"\" /></p>\n</li>\n<li>\n<p>解决办法在 <code>Startup</code>  文件中注册鉴权</p>\n</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#x2F;&#x2F; 默认进行 cookie 鉴权</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>services.AddAuthentication (CookieAuthenticationDefaults.AuthenticationScheme).AddCookie (option &#x3D;&gt;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     option.LoginPath &#x3D; &quot;&#x2F;api&#x2F;Default&quot;;   &#x2F;&#x2F; 如果授权失败默认跳转的 api</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;);</pre></td></tr></table></figure><ul>\n<li>cookies 过期后再调用 api<br />\n<img data-src=\"authorizationFilter-2.jpg\" alt=\"\" /><br />\n <code>跳转到授权失败的默认api</code></li>\n</ul>\n<h1 id=\"七使用角色授权\"><a class=\"anchor\" href=\"#七使用角色授权\">#</a> 七：使用角色授权</h1>\n<ul>\n<li>登录用户的角色是在生成用户的载体中录入的<br />\n<img data-src=\"authorizationFilter-3.jpg\" alt=\"\" /></li>\n<li>在 Authorization 中标记上角色授权</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[HttpGet]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> [Authorize (Roles &#x3D;(&quot;Admin&quot;))] </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> public string AuthorizeIndex() </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     return &quot;authoize&quot;;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> &#125;</pre></td></tr></table></figure><p>如果标记的角色与当前登录的用户角色不匹配。则授权失败，找不到请求的 api。返回错误码 <code>404</code></p>\n<h1 id=\"八使用策略授权\"><a class=\"anchor\" href=\"#八使用策略授权\">#</a> 八：使用策略授权</h1>\n<ul>\n<li>在 <code>Startup</code>  文件中注册策略授权<br />\n策略授权就是自定义一些应用系统的授权方案</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>services.AddAuthorization(policy &#x3D;&gt;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>policy.AddPolicy(&quot;Default&quot;, options &#x3D;&gt;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     options.RequireRole(&quot;Admin&quot;);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#125;);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;);</pre></td></tr></table></figure><ul>\n<li>在 Authorization 中标记上策略授权</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[HttpGet]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> [Authorize (Policy &#x3D;(&quot;Default&quot;))] </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> public string AuthorizeIndex() </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     return &quot;authoize&quot;;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> &#125;</pre></td></tr></table></figure><p><a href=\"https://pustea-wls.github.io/pustea-wls/2021/08/14/Net/Net5/\">自定义策略授权</a></p>\n",
            "tags": [
                "Asp.net Core",
                "Asp.net Core",
                "AOP",
                "Filter"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2022/07/13/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BExceptionFilter/",
            "url": "https://pustea-wls.github.io/2022/07/13/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BExceptionFilter/",
            "title": "aspnetcore过滤器系列四：ExceptionFilter",
            "date_published": "2022-07-13T07:00:00.000Z",
            "content_html": "<h2 id=\"exceptionfilter的同步实现\"><a class=\"anchor\" href=\"#exceptionfilter的同步实现\">#</a> ExceptionFilter 的同步实现</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomExceptionFilterAttribute : Attribute, IExceptionFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public void OnException(ExceptionContext context)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            Console.WriteLine(context.Exception);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    &#125;</pre></td></tr></table></figure><p>将异常过滤器标注在 action 中</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Route(&quot;&#x2F;api&#x2F;[action]&quot;)]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public class ExceptionController:ControllerBase</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        public ExceptionController() </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        [HttpGet]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        [CustomExceptionFilterAttribute]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        public string ExceptionIndex() </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            int zero &#x3D; 0;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            int a &#x3D; 10 &#x2F; zero;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            return &quot;exceptionFilter&quot;;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>&#125;</pre></td></tr></table></figure><h3 id=\"运行项目\"><a class=\"anchor\" href=\"#运行项目\">#</a> 运行项目</h3>\n<p><img data-src=\"exceptionFilter-1.png\" alt=\"\" /></p>\n<h3 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h3>\n<p><code>当发生异常时捕获异常进行处理</code></p>\n<h2 id=\"exceptionfilter的异步实现\"><a class=\"anchor\" href=\"#exceptionfilter的异步实现\">#</a> ExceptionFilter 的异步实现</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomAsyncExceptionFilterAttribute : Attribute, IAsyncExceptionFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public Task OnExceptionAsync(ExceptionContext context)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>             Console.WriteLine(context.Exception);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    &#125;</pre></td></tr></table></figure><h2 id=\"exceptionfilter在业务上能做什么\"><a class=\"anchor\" href=\"#exceptionfilter在业务上能做什么\">#</a> ExceptionFilter 在业务上能做什么</h2>\n<p><code>对异常事件的记录以便开发人员调试追踪。对异常结果进行人性化处理,对用户更加友好</code></p>\n<p>异常处理之前的结果<br />\n<img data-src=\"exceptionFilter-2.png\" alt=\"\" /></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomExceptionFilterAttribute : Attribute, IExceptionFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public void OnException (ExceptionContext context)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            context.Result &#x3D; new JsonResult (new</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                success&#x3D;false,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                message&#x3D;&quot;程序异常&quot;+context.Exception.Message</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            &#125;);</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            Console.WriteLine (context.Exception);</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    &#125;</pre></td></tr></table></figure><p>异常处理之后的结果<br />\n<img data-src=\"exceptionFilter-3.png\" alt=\"\" /></p>\n<h3 id=\"局限性\"><a class=\"anchor\" href=\"#局限性\">#</a> 局限性</h3>\n<p><code>ExceptionFilter有一个捕获异常的范围。如果异常发生在范围外。该异常将不再被捕获</code></p>\n",
            "tags": [
                "Asp.net Core",
                "Asp.net Core",
                "AOP",
                "Filter"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2022/07/08/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BResultFilter/",
            "url": "https://pustea-wls.github.io/2022/07/08/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BResultFilter/",
            "title": "aspnetcore过滤器系列三：ResultFilter",
            "date_published": "2022-07-08T08:00:00.000Z",
            "content_html": "<h2 id=\"resultfilter同步实现\"><a class=\"anchor\" href=\"#resultfilter同步实现\">#</a> ResultFilter 同步实现</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomResultFilterAttribute : Attribute, IResultFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public void OnResultExecuted (ResultExecutedContext context)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            Console.WriteLine (&quot;结果过滤器之后&quot;);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        public void OnResultExecuting (ResultExecutingContext context)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            Console.WriteLine (&quot;结果过滤器之前&quot;);</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    &#125;</pre></td></tr></table></figure><p>标注 action</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Route (&quot;&#x2F;api&#x2F;[action]&quot;)]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public class ResultController:ControllerBase</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      public ResultController () </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         Console.WriteLine (&quot;构造函数&quot;);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      [HttpGet]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      [CustomResultFilterAttribute]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      public  string ResultIndex () </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      &#123;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          Console.WriteLine (&quot;方法执行&quot;);</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          return &quot;resultFilter&quot;;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>&#125;</pre></td></tr></table></figure><h3 id=\"运行项目\"><a class=\"anchor\" href=\"#运行项目\">#</a> 运行项目</h3>\n<p><img data-src=\"resultFilter-1.jpg\" alt=\"\" /></p>\n<h3 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h3>\n<p><code>控制器构造函数-》调用的API(action)-》OnResultExecuting-》OnResultExecuted</code></p>\n<h2 id=\"resultfilter异步实现\"><a class=\"anchor\" href=\"#resultfilter异步实现\">#</a> ResultFilter 异步实现</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomAsyncResultFilterAttribute : Attribute, IAsyncResultFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public async Task OnResultExecutionAsync (ResultExecutingContext context, ResultExecutionDelegate next)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            Console.WriteLine (&quot;结果过滤器之前&quot;);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            await next.Invoke ();</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            Console.WriteLine (&quot;结果过滤器之后&quot;);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &#125;</pre></td></tr></table></figure><h2 id=\"resultfilter在业务上能用来做什么\"><a class=\"anchor\" href=\"#resultfilter在业务上能用来做什么\">#</a> ResultFilter 在业务上能用来做什么</h2>\n<p><code>对接口(action)中的结果进行处理。例如将返回的结果变成统一的json格式</code></p>\n<p>处理之前的结果<br />\n<img data-src=\"resultFilter-2.jpg\" alt=\"\" /></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomResultFilterAttribute : Attribute, IResultFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public void OnResultExecuted (ResultExecutedContext context)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            Console.WriteLine (&quot;结果过滤器之后&quot;);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        public void OnResultExecuting (ResultExecutingContext context)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            dynamic result &#x3D; context.Result;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            context.Result &#x3D; new JsonResult (new Result </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            &#123;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                Data&#x3D;result.Value,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                Code&#x3D;200,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                Msg&#x3D;&quot;success&quot;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            &#125;);</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            Console.WriteLine (&quot;结果过滤器之前&quot;);</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    public class Result</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        public string Msg &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        public int Code &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        public object Data &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    &#125;</pre></td></tr></table></figure><p>处理之后的结果<br />\n<img data-src=\"resultFilter-3.jpg\" alt=\"\" /></p>\n",
            "tags": [
                "Asp.net Core",
                "Asp.net Core",
                "AOP",
                "Filter"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2022/07/07/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BActionFilter/",
            "url": "https://pustea-wls.github.io/2022/07/07/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BActionFilter/",
            "title": "aspnetcore过滤器系列二：ActionFilter",
            "date_published": "2022-07-07T06:00:00.000Z",
            "content_html": "<h2 id=\"actionfilter同步实现\"><a class=\"anchor\" href=\"#actionfilter同步实现\">#</a> ActionFilter 同步实现</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomActionFilterAttribute : Attribute, IActionFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public void OnActionExecuted (ActionExecutedContext context)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            Console.WriteLine (&quot;action 之后&quot;);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        public void OnActionExecuting (ActionExecutingContext context)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            Console.WriteLine (&quot;action 之前&quot;);</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    &#125;</pre></td></tr></table></figure><p>自定义实现的过滤器标注在 action</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Route (&quot;&#x2F;api&#x2F;[action]&quot;)]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public class ActionController : ControllerBase</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        public ActionController () </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            Console.WriteLine (&quot;action 构造函数&quot;);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        [HttpGet]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        [CustomActionFilterAttribute]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        public string ActionIndex () </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            _logger.LogInformation (&quot;日志记录方法执行&quot;);</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            return &quot;actionFilter&quot;;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>&#125;</pre></td></tr></table></figure><h3 id=\"运行项目\"><a class=\"anchor\" href=\"#运行项目\">#</a> 运行项目</h3>\n<p><img data-src=\"actionFilter-1.jpg\" alt=\"\" /></p>\n<h3 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h3>\n<p><code>控制器构造函数-》OnActionExecuting-》调用的API(action)-OnActionExecuted</code></p>\n<h2 id=\"actionfilter异步实现\"><a class=\"anchor\" href=\"#actionfilter异步实现\">#</a> ActionFilter 异步实现</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomAsyncActionFilterAttribute : Attribute, IAsyncActionFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public async Task OnActionExecutionAsync (ActionExecutingContext context, ActionExecutionDelegate next)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            Console.WriteLine (&quot;action 之前&quot;);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            await next.Invoke ();</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            Console.WriteLine (&quot;action 之后&quot;);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &#125;</pre></td></tr></table></figure><h2 id=\"actionfiter业务上能做什么\"><a class=\"anchor\" href=\"#actionfiter业务上能做什么\">#</a> ActionFiter 业务上能做什么</h2>\n<p><code>记录日志</code></p>\n<p>简单记录下实现日志的功能</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomActionFilterAttribute : Attribute, IActionFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        private readonly ILogger&lt;CustomActionFilterAttribute&gt; _logger;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        public CustomActionFilterAttribute (ILogger&lt;CustomActionFilterAttribute&gt; logger) </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            _logger &#x3D; logger;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        public void OnActionExecuted (ActionExecutedContext context)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            _logger.LogInformation (&quot;日志进入之后&quot;);</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            Console.WriteLine (&quot;action 之后&quot;);</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        public void OnActionExecuting (ActionExecutingContext context)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            _logger.LogInformation (&quot;日志进入之前&quot;);</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            Console.WriteLine (&quot;action 之前&quot;);</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    &#125;</pre></td></tr></table></figure><p>上面我们加了一个参数是日志接口的构造函数方法，当我们要在 action 上面去标记自定义的过滤器时，发现编译并不通过<br />\n<img data-src=\"actionFilter-2.jpg\" alt=\"\" /><br />\n上面的提示很清楚，我们没有传入对应的构造函数参数，以实例化对象。<br />\n如何不给构造函数参数也能实例化对象？？？<br />\n 答案:' 依赖注入 -- 让 IOC 容器来创建对象'<br />\n 下面有三种方法可以实现</p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<h6 id=\"1typefilterattribute支持filter的构造函数注入\"><a class=\"anchor\" href=\"#1typefilterattribute支持filter的构造函数注入\">#</a> 1.TypeFilterAttribute: 支持 Filter 的构造函数注入</h6>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[HttpGet]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>[TypeFilter (typeof (CustomActionFilterAttribute))]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>public string ActionIndex () </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    _logger.LogInformation (&quot;日志记录方法执行&quot;);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    return &quot;actionFilter&quot;;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;</pre></td></tr></table></figure><h6 id=\"2servicefilterattribute使用这个必须要注册服务同样支持filter的构造函数注入\"><a class=\"anchor\" href=\"#2servicefilterattribute使用这个必须要注册服务同样支持filter的构造函数注入\">#</a> 2.ServiceFilterAttribute: 使用这个必须要注册服务，同样支持 Filter 的构造函数注入</h6>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[HttpGet]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>[ServiceFilter (typeof (CustomActionFilterAttribute))]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>public string ActionIndex () </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    _logger.LogInformation (&quot;日志记录方法执行&quot;);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   return &quot;actionFilter&quot;;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;</pre></td></tr></table></figure><p>在 startup.cs 文件中我们需要注册一下 CustomActionFilterAttribute 这个类</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>services.AddTransient&lt;CustomActionFilterAttribute&gt;();</pre></td></tr></table></figure><h6 id=\"3全局注册支持filter的构造函数注入\"><a class=\"anchor\" href=\"#3全局注册支持filter的构造函数注入\">#</a> 3. 全局注册：支持 Filter 的构造函数注入</h6>\n<p>在 startup.cs 中</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>services.AddTransient&lt;CustomActionFilterAttribute&gt;();</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>services.AddControllers((options)&#x3D;&gt; </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  options.Filters.Add&lt;CustomActionFilterAttribute&gt;();</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;);</pre></td></tr></table></figure>",
            "tags": [
                "Asp.net Core",
                "Asp.net Core",
                "AOP",
                "Filter"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2022/06/28/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BResourceFilter/",
            "url": "https://pustea-wls.github.io/2022/06/28/aspnetcore%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B9%8BResourceFilter/",
            "title": "aspnetcore过滤器系列一：ResourceFilter",
            "date_published": "2022-06-28T08:00:00.000Z",
            "content_html": "<p><code>aspnetcore中的过滤器是Aop编程的一种实现形式。记录下学习的过程，方便以后查阅</code></p>\n<h2 id=\"resourcefilter同步实现\"><a class=\"anchor\" href=\"#resourcefilter同步实现\">#</a> ResourceFilter 同步实现</h2>\n<p>我们新建一个 WebApi 项目，然后创建一个自定义实现的 ResourceFilter (资源过滤器)</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomResourceFilterAttribute : Attribute, IResourceFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        &#x2F;&#x2F; 资源进入之前</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        public void OnResourceExecuting (ResourceExecutingContext context)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            Console.WriteLine (&quot;请求之前&quot;);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        &#x2F;&#x2F; 资源退出之后</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        public void OnResourceExecuted (ResourceExecutedContext context)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            Console.WriteLine (&quot;请求之后&quot;);</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    &#125;</pre></td></tr></table></figure><p>上面自定义的资源过滤器继承了特性和实现了资源过滤器的接口</p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p><code>在框架中凡是系统提供的接口都是给开发者做扩展使用的</code> <br />\n实现完自定义的资源过滤器后，将他们标注在相关的 action 上面</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Route (&quot;&#x2F;api&#x2F;[action]&quot;)]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public class ResourceController : ControllerBase</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      private readonly ILogger&lt;ResourceController&gt; _logger;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      public ResourceController (ILogger&lt;ResourceController&gt; logger)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          _logger &#x3D; logger;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          Console.WriteLine (&quot;构造函数&quot;);</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      [HttpGet]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      [CustomResourceFilter]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      public string ResourceIndex ()</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      &#123;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          Console.WriteLine (&quot;方法执行中&quot;);</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          return &quot;success&quot;;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&#125;</pre></td></tr></table></figure><h3 id=\"运行项目\"><a class=\"anchor\" href=\"#运行项目\">#</a> 运行项目</h3>\n<p><img data-src=\"resourceFilter-1.jpg\" alt=\"\" /></p>\n<h3 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h3>\n<p><code>OnResourceExecuting-》控制器构造函数-》调用的API(action)-》OnResourceExecuted</code></p>\n<h2 id=\"resourcefilter异步实现\"><a class=\"anchor\" href=\"#resourcefilter异步实现\">#</a> ResourceFilter 异步实现</h2>\n<p>同步和异步原理和步骤上是一样的，书写的代码有所不同.</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomAsyncResourceFilterAttribute : Attribute, IAsyncResourceFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public async Task OnResourceExecutionAsync (ResourceExecutingContext context, ResourceExecutionDelegate next)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            Console.WriteLine (&quot;执行之前 Async&quot;);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            ResourceExecutedContext resource &#x3D; await next.Invoke ();</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            Console.WriteLine (&quot;执行之后 Async&quot;);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &#125;</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Route (&quot;&#x2F;api&#x2F;[action]&quot;)]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public class ResourceController : ControllerBase</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     private readonly ILogger&lt;ResourceController&gt; _logger  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     public ResourceController (ILogger&lt;ResourceController&gt; logger)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         _logger &#x3D; logger;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         Console.WriteLine (&quot;构造函数&quot;);</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     [HttpGet]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     [CustomAsyncResourceFilterAttribute]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     public string ResourceAsyncIndex () </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     &#123;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         Console.WriteLine (&quot;方法执行中&quot;);</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         return &quot;success&quot;;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     &#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>&#125;</pre></td></tr></table></figure><h2 id=\"resourcefilter在业务上能用来做什么\"><a class=\"anchor\" href=\"#resourcefilter在业务上能用来做什么\">#</a> ResourceFilter 在业务上能用来做什么</h2>\n<p><code>缓存</code></p>\n<p>下面实现缓存的代码以异步实现</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class CustomAsyncResourceFilterAttribute : Attribute, IAsyncResourceFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public async Task OnResourceExecutionAsync (ResourceExecutingContext context, ResourceExecutionDelegate next)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            Console.WriteLine (&quot;执行之前 Async&quot;);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            string requestPath &#x3D; context.HttpContext.Request.Path;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            bool sign &#x3D; await RedisHelper.Do (d &#x3D;&gt; d.KeyExistsAsync (requestPath));</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            if (sign)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            &#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                string  value &#x3D; await RedisHelper.StringGetAsync (requestPath);</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                &#x2F;&#x2F; 类似于短路。context.Result 赋值后就会终止</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                context.Result &#x3D; new JsonResult (value);</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            &#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            else</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            &#123;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                &#x2F;&#x2F; 获取 action 中的结果</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                ResourceExecutedContext resource &#x3D; await next.Invoke ();</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                dynamic Result &#x3D; resource.Result;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                &#x2F;&#x2F; 缓存 20 秒</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                await RedisHelper.StringSetAsync (requestPath, Result.Value, TimeSpan.FromSeconds (20));</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                string value &#x3D; await RedisHelper.StringGetAsync (requestPath);</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                Console.WriteLine (value);</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            &#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            Console.WriteLine (&quot;执行之后 Async&quot;);</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    &#125;</pre></td></tr></table></figure><p>上面 RedisHelper 的操作类库是自己封装了一下，方便调用。<span class=\"exturl\" data-url=\"aHR0cDovLzEwNi43NS4yNDQuNzU6OTAwMi9wYWNrYWdlcy90ZWFwdXMucmVkaXMvMS4wLjA=\">redis 的 nuget 地址</span>如果服务器还没有过期</p>\n",
            "tags": [
                "Asp.net Core",
                "Asp.net Core",
                "AOP",
                "Filter"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2022/06/09/hexo-shoka%E4%B8%ADcdn.jsdelivr.net%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD/",
            "url": "https://pustea-wls.github.io/2022/06/09/hexo-shoka%E4%B8%ADcdn.jsdelivr.net%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD/",
            "title": "hexo-shoka中cdn.jsdelivr.net无法加载",
            "date_published": "2022-06-09T03:00:00.000Z",
            "content_html": "<p><code>最近访问博客后发现页面加载不出来,经过F12查看后发现是cdn.jsdelivr.net服务器挂了导致相关js加载不出来</code></p>\n<h2 id=\"问题解决\"><a class=\"anchor\" href=\"#问题解决\">#</a> 问题解决</h2>\n<h3 id=\"assetjs-文件\"><a class=\"anchor\" href=\"#assetjs-文件\">#</a> asset.js 文件</h3>\n<p>文件地址 Blog\\themes\\shoka\\scripts\\helpers\\asset.js<br />\n 将 <code>cdn.jsdelivr.net</code>  替换成  <code>fastly.jsdelivr.net</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#x2F;&#x2F;cdn.jsdelivr.net 被墙无法访问</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  &#x2F;&#x2F;let result &#x3D; vendorJs ? &#96;&lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;combine&#x2F;$&#123;vendorJs&#125;&quot;&gt;&lt;&#x2F;script&gt;&#96; : &#39;&#39;;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  &#x2F;&#x2F;return vendorJs ? htmlTag (&#39;script&#39;, &#123; src: &#96;&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;combine&#x2F;$&#123;vendorJs&#125;&#96; &#125;, &#39;&#39;) : &#39;&#39;;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  let result &#x3D; vendorJs ? &#96;&lt;script src&#x3D;&quot;&#x2F;&#x2F;fastly.jsdelivr.net&#x2F;combine&#x2F;$&#123;vendorJs&#125;&quot;&gt;&lt;&#x2F;script&gt;&#96; : &#39;&#39;;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  return vendorJs ? htmlTag (&#39;script&#39;, &#123; src: &#96;&#x2F;&#x2F;fastly.jsdelivr.net&#x2F;combine&#x2F;$&#123;vendorJs&#125;&#96; &#125;, &#39;&#39;) : &#39;&#39;;</pre></td></tr></table></figure>",
            "tags": [
                "Others",
                "Others"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2021/11/10/aspnetcore%E9%83%A8%E7%BD%B2%E5%88%B0linux/",
            "url": "https://pustea-wls.github.io/2021/11/10/aspnetcore%E9%83%A8%E7%BD%B2%E5%88%B0linux/",
            "title": "将aspnetcore项目部署到Centos8",
            "date_published": "2021-11-10T07:00:00.000Z",
            "content_html": "<p><code>aspNetCore 跨平台之后，自己弄了一台Linux服务器。想着部署到上面试试看。作为之前从未接触Linux的小白。一番折腾可不容易，记录下方便以后查阅</code></p>\n<h2 id=\"使用docker生成镜像后部署\"><a class=\"anchor\" href=\"#使用docker生成镜像后部署\">#</a> 使用 Docker 生成镜像后部署</h2>\n<p>我当前的这台服务器的版本是 <code>Centos8.3</code></p>\n<p>1. 首先我们打开自己要部署的项目，使用 vs 生成一个 DockerFile 文件</p>\n<p><img data-src=\"1.jpg\" alt=\"\" /></p>\n<p>因为我本地也已经安装过 Docker 了，所以我现在本地尝试一下</p>\n<h6 id=\"生成一个镜像\"><a class=\"anchor\" href=\"#生成一个镜像\">#</a> 生成一个镜像</h6>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker build -t aspnetcore:v1 .</pre></td></tr></table></figure><p>在这命令就踩了很多坑，最后发现默认生成的 DockFile 文件是在当前这个文件夹下面 (这边没有我已经将他去除)<br />\n<img data-src=\"2.jpg\" alt=\"\" /><br />\n <code>我们将DockerFile文件向上移动一级和.sln文件同级</code> 这样就可以成功了<br />\n<img data-src=\"7.jpg\" alt=\"\" /></p>\n<h6 id=\"运行一个容器\"><a class=\"anchor\" href=\"#运行一个容器\">#</a> 运行一个容器</h6>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d -p 8000:80 --name aspnetcoreclient aspnetcore:v1</pre></td></tr></table></figure><p>本地运行成功<br />\n<img data-src=\"3.jpg\" alt=\"\" /></p>\n<h2 id=\"部署到linux服务器上\"><a class=\"anchor\" href=\"#部署到linux服务器上\">#</a> 部署到 Linux 服务器上</h2>\n<p>作为一个 Linux 小白一些命令只能从基础学起</p>\n<h3 id=\"以下一些命令需要你已经安装了docker\"><a class=\"anchor\" href=\"#以下一些命令需要你已经安装了docker\">#</a> 以下一些命令需要你已经安装了 Docker</h3>\n<h6 id=\"linux安装-lrzsz下载文件\"><a class=\"anchor\" href=\"#linux安装-lrzsz下载文件\">#</a> Linux 安装 lrzsz (下载文件)</h6>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum install -y lrzsz</pre></td></tr></table></figure><h6 id=\"如何将本地文件上传到服务器上windows上传到linux\"><a class=\"anchor\" href=\"#如何将本地文件上传到服务器上windows上传到linux\">#</a> 如何将本地文件上传到服务器上 (windows 上传到 Linux)</h6>\n<p>在这里我连接服务器的软件是 Xshell 6<br />\n<img data-src=\"4.jpg\" alt=\"\" /><br />\n 将要上传的文件夹压缩后就可以上传了<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcXRpZ2VyL3AvMTM4NDYwNzAuaHRtbA==\">具体的操作流程</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcXRpZ2VyL3AvMTM4NDcyNDUuaHRtbA==\"> Linux 服务器上安装解压 rar 安装包操作步骤</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhaW5ubmJvdy9hcnRpY2xlL2RldGFpbHMvNTA0MjA2MDQ=\"> Linux 文件基本命令</span></p>\n<p>在 Linux 执行命令后<br />\n<img data-src=\"5.jpg\" alt=\"\" /><br />\n当前是执行在 80 端口<br />\n<img data-src=\"6.jpg\" alt=\"\" /></p>\n<p>这就是一个最简单的 asp.netCore 的发布到 Linux 的过程</p>\n",
            "tags": [
                "Docker",
                "Docker"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2021/08/30/Iview%E4%B8%AD%E7%9A%84tree%E7%BB%84%E4%BB%B6/",
            "url": "https://pustea-wls.github.io/2021/08/30/Iview%E4%B8%AD%E7%9A%84tree%E7%BB%84%E4%BB%B6/",
            "title": "使用递归遍历树形菜单下面的所有子节点",
            "date_published": "2021-08-30T00:37:49.000Z",
            "content_html": "<p>在 Iview 中使用 tree 组件遍历菜单下面的所有子节点</p>\n<h3 id=\"菜单表的数据结构\"><a class=\"anchor\" href=\"#菜单表的数据结构\">#</a> 菜单表的数据结构</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Key]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  public int Id &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  &#x2F;&#x2F; 模块</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  public string? ModuleCode &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  &#x2F;&#x2F; 类型</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  public int? Type &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  &#x2F;&#x2F; 父级</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  public int? ParentId &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  &#x2F;&#x2F; 名称</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  public string? Name &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  ......</pre></td></tr></table></figure><p><code>上面展示了菜单表的部分字段,在这里我们主要关注两个字段:Id,ParentId。上下菜单级的关联主要用到这个字段。当菜单无上级时。ParentId为-1</code></p>\n<h3 id=\"绑定到页面的数据结构\"><a class=\"anchor\" href=\"#绑定到页面的数据结构\">#</a> 绑定到页面的数据结构</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      baseData<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          expand<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          title<span class=\"token operator\">:</span> <span class=\"token string\">\"菜单管理\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h3 id=\"初始化一级菜单\"><a class=\"anchor\" href=\"#初始化一级菜单\">#</a> 初始化一级菜单</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">loadInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://localhost:5001/api/Query\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        pageSize<span class=\"token operator\">:</span> <span class=\"token number\">99999</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        pageIndex<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 遍历一级菜单</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">curr<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>parentId <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token keyword\">var</span> children <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">childernTree</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            title<span class=\"token operator\">:</span> curr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            expand<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            children<span class=\"token operator\">:</span> children<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>baseData<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h3 id=\"递归遍历下面的所有子节点\"><a class=\"anchor\" href=\"#递归遍历下面的所有子节点\">#</a> 递归遍历下面的所有子节点</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">childernTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> arry<span class=\"token punctuation\">,</span> arryChildren</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token comment\">// 找到当前当前子节点的下一级</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">curr<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> childrenArr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> curr<span class=\"token punctuation\">.</span>parentId <span class=\"token operator\">==</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token comment\">// 递归出口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> arry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      result<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">curr<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arry<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 核心 (向后面的子节点插入数据)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          arryChildren<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            title<span class=\"token operator\">:</span> curr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            expand<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          arry <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              title<span class=\"token operator\">:</span> curr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>              expand<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>              children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          arryChildren <span class=\"token operator\">=</span> arry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 当有多个同级菜单</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arry<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          arry<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            title<span class=\"token operator\">:</span> curr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            expand<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          arryChildren <span class=\"token operator\">=</span> arry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">childernTree</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> arry<span class=\"token punctuation\">,</span> arryChildren<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token keyword\">return</span> arry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h3 id=\"数据库中的数据\"><a class=\"anchor\" href=\"#数据库中的数据\">#</a> 数据库中的数据</h3>\n<p><img data-src=\"vue-tree-1.png\" alt=\"\" /></p>\n<h3 id=\"渲染到页面的数据\"><a class=\"anchor\" href=\"#渲染到页面的数据\">#</a> 渲染到页面的数据</h3>\n<p><img data-src=\"vue-tree-2.png\" alt=\"\" /></p>\n",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2021/08/28/Iview%E4%B8%AD%E7%9A%84%E6%A8%A1%E6%80%81%E6%A1%86/",
            "url": "https://pustea-wls.github.io/2021/08/28/Iview%E4%B8%AD%E7%9A%84%E6%A8%A1%E6%80%81%E6%A1%86/",
            "title": "在render函数中使用this.$Modal.confirm模态框访问不到当前vue组件实例(this指向问题)",
            "date_published": "2021-08-28T10:58:00.000Z",
            "content_html": "<p>有一个小的功能在 iview 的 table 组件中。点击删除后弹出一个模态框，接着点击确定后删除数据。<br />\n在用 render 函数时遇到一个小的问题</p>\n<h2 id=\"初始化页面数据\"><a class=\"anchor\" href=\"#初始化页面数据\">#</a> 初始化页面数据</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">loadInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://localhost:5001/api/Query\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h2 id=\"render函数中删除数据\"><a class=\"anchor\" href=\"#render函数中删除数据\">#</a> Render 函数中删除数据</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>on<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function-variable function\">click</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$Modal<span class=\"token punctuation\">.</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        title<span class=\"token operator\">:</span> <span class=\"token string\">\"确定删除吗？\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">async</span> <span class=\"token function\">onOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">var</span> <span class=\"token punctuation\">&#123;</span> code <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            method<span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token string\">\"https://localhost:5001/api/Delete\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> row<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$Message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p><img data-src=\"vue-1.png\" alt=\"\" /></p>\n<h2 id=\"将click方法修改\"><a class=\"anchor\" href=\"#将click方法修改\">#</a> 将 Click 方法修改</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>on<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function-variable function\">click</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$Modal<span class=\"token punctuation\">.</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 接受外面的变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">let</span> loadInit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadInit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        title<span class=\"token operator\">:</span> <span class=\"token string\">\"确定删除吗？\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">async</span> <span class=\"token function\">onOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">var</span> <span class=\"token punctuation\">&#123;</span> code <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            method<span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token string\">\"https://localhost:5001/api/Delete\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> row<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token function\">loadInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$Message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>             <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure>",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2021/08/14/hello-world/",
            "url": "https://pustea-wls.github.io/2021/08/14/hello-world/",
            "title": "Hello World",
            "date_published": "2021-08-14T10:08:00.000Z",
            "content_html": "<p><code>I can do all things</code></p>\n",
            "tags": [
                "Others",
                "Others"
            ]
        },
        {
            "id": "https://pustea-wls.github.io/2021/08/14/Net/Net5/",
            "url": "https://pustea-wls.github.io/2021/08/14/Net/Net5/",
            "title": "如何在Asp.net Core启动的时候，操作数据库",
            "date_published": "2021-08-14T10:08:00.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1Bc3AtbHA2ZTk3M2Vzbng5d2RzNDdjLm5ldA==\">最近在研究 Asp.net</span> Core 基于 JWT 授权码模式去实现策略授权 (根据用户的角色动态判断是否拥有对访问接口的权限). 在完成 jwt 的授权码和模拟用户，角色等数据后，想着去在策略授权的时候直接去访问数据库的数据。发现这并不容易。查找一些资料后</p>\n<h3 id=\"核心代码\"><a class=\"anchor\" href=\"#核心代码\">#</a> 核心代码</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#x2F;&#x2F; 连接字符串</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> services.AddDbContext&lt;JWTContext&gt;(options &#x3D;&gt;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> options.UseSqlServer (Configuration.GetConnectionString (&quot;JWTDBConnection&quot;)));</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> services.AddScoped&lt;IAppSettings, AppSettings&gt;();</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> &#x2F;&#x2F; 读取数据库配置策略授权 (重点)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> services.AddOptions&lt;AuthorizationOptions&gt;().Configure&lt;IServiceScopeFactory&gt;((options, sp) &#x3D;&gt;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> &#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    using (var scope &#x3D; sp.CreateScope ())</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        IAppSettings settings &#x3D; scope.ServiceProvider.GetRequiredService&lt;IAppSettings&gt;();</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        var Permission &#x3D; settings.userPermissions ();</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        options.AddPolicy (&quot;Permission&quot;, policy &#x3D;&gt; policy.Requirements.Add (Permission));</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>&#125;);</pre></td></tr></table></figure><p>查看上面的代码我们可以发现，在连接数据的下面。我们让容器中注入了一个服务:<br />\n <code>services.AddScoped&lt;IAppSettings, AppSettings&gt;()</code></p>\n<h3 id=\"定义接口\"><a class=\"anchor\" href=\"#定义接口\">#</a> 定义接口</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public interface IAppSettings  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> &#123;  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      PolicyRequirement userPermissions();  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> &#125;</pre></td></tr></table></figure><h3 id=\"实现接口\"><a class=\"anchor\" href=\"#实现接口\">#</a> 实现接口</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class AppSettings:IAppSettings</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        public JWTContext context;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        public AppSettings(JWTContext context)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            this.context &#x3D; context;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        public PolicyRequirement userPermissions()</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            PolicyRequirement policyRequirement &#x3D; new PolicyRequirement();</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            var _jWTContext &#x3D; context;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            var perssions &#x3D; _jWTContext.permssions;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            var roles &#x3D; _jWTContext.roles;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            policyRequirement.DeniedAction &#x3D; new PathString(&quot;&#x2F;api&#x2F;nopermission&quot;);</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            policyRequirement.UserPermissions &#x3D; (from r in roles</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                               join p in perssions</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                               on r.Id equals p.RoleId</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                               select new UserPermission</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                               &#123;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                                   UserName &#x3D; r.Name,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                                   Url &#x3D; &quot;&#x2F;WeatherForecast&quot; + p.Permssions</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                               &#125;).ToList();</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            return policyRequirement;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        &#125;</pre></td></tr></table></figure><h3 id=\"策略授权的核心代码\"><a class=\"anchor\" href=\"#策略授权的核心代码\">#</a> 策略授权的核心代码</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class PolicyRequirement: IAuthorizationRequirement</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        &#x2F;&#x2F;&#x2F; 用户权限集合</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        public List&lt;UserPermission&gt; UserPermissions &#123; get;  set; &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        &#x2F;&#x2F;&#x2F; 无权限 action</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        public string DeniedAction &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        &#x2F;&#x2F;&#x2F; 构造</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        public PolicyRequirement ()</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            &#x2F;&#x2F; 没有权限则跳转到这个路由</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            DeniedAction &#x3D; new PathString (&quot;&#x2F;api&#x2F;nopermission&quot;);</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            &#x2F;&#x2F; 用户有权限访问的路由配置，当然可以从数据库获取</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            UserPermissions &#x3D; new List&lt;UserPermission&gt; &#123;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                              new UserPermission &#123;  Url&#x3D;&quot;&#x2F;WeatherForecast&#x2F;Tourist&quot;, UserName&#x3D;&quot;user&quot;&#125;,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                          &#125;;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    &#x2F;&#x2F;&#x2F; 用户权限承载实体</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    public class UserPermission</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        &#x2F;&#x2F;&#x2F; 用户名</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        public string UserName &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;summary&gt;</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        &#x2F;&#x2F;&#x2F; 请求 Url</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        public string Url &#123; get; set; &#125;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    &#125;</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class PolicyHandler : AuthorizationHandler&lt;PolicyRequirement&gt;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        protected override Task HandleRequirementAsync (AuthorizationHandlerContext context, PolicyRequirement requirement)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            &#x2F;&#x2F;var httpContext &#x3D; ((context.Resource) as Microsoft.AspNetCore.Routing.RouteEndpoint);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            &#x2F;&#x2F;dynamic httpContext &#x3D; context.Resource;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            var httpContext &#x3D; context.Resource as HttpContext;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            var questUrl &#x3D; httpContext.Request.Path.Value;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            &#x2F;&#x2F; 赋值用户权限</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            var userPermissions &#x3D; requirement.UserPermissions;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            &#x2F;&#x2F; 是否经过验证</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            var isAuthenticated &#x3D; context.User.Identity.IsAuthenticated;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            if (isAuthenticated)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            &#123;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                if (userPermissions.GroupBy (g &#x3D;&gt; g.Url).Any (w &#x3D;&gt; w.Key &#x3D;&#x3D; questUrl))</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                &#123;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    &#x2F;&#x2F; 用户名</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    var userName &#x3D; context.User.Claims.Where (x&#x3D;&gt;x.Type&#x3D;&#x3D;&quot;roless&quot;).First ().Value;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    if (userPermissions.Any (w &#x3D;&gt; w.UserName &#x3D;&#x3D; userName &amp;&amp; w.Url&#x3D;&#x3D; questUrl))</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    &#123;</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        context.Succeed (requirement);</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    &#125;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    else</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    &#123;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        &#x2F;&#x2F; 无权限跳转到拒绝页面</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        &#x2F;&#x2F;context.Fail ();</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        &#x2F;&#x2F;httpContext.Response.Redirect (&quot;https:&#x2F;&#x2F;localhost:5001&#x2F;api&#x2F;nopermission&quot;);</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        context.Fail ();</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        var Response &#x3D; httpContext.Response;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        var message &#x3D; Encoding.UTF8.GetBytes (&quot;User with Super Admin role cannot be edited&quot;);</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        Response.OnStarting (async () &#x3D;&gt;</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        &#123;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                            httpContext.Response.StatusCode &#x3D; 429;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                            await Response.Body.WriteAsync (message, 0, message.Length);</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        &#125;);</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    &#125;</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                &#125;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                else</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                &#123;</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    context.Succeed (requirement);</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                &#125;</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            &#125;</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            return Task.CompletedTask;</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    &#125;</pre></td></tr></table></figure>",
            "tags": [
                "Net",
                "Asp.net Core",
                "Net"
            ]
        }
    ]
}